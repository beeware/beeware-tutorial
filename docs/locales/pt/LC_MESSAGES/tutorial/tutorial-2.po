msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-21 16:18-0400\n"
"PO-Revision-Date: 2024-02-07 15:02+0000\n"
"Last-Translator: joaovitorpmoreira <programacaojoaopm@gmail.com>\n"
"Language-Team: Portuguese <https://hosted.weblate.org/projects/beeware/"
"tutorial/tutorial-2/pt/>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/en/tutorial/tutorial-2.md:1
msgid "Tutorial 2 - Making it interesting"
msgstr "Tutorial 2 - Tornando as coisas interessantes"

#: docs/en/tutorial/tutorial-2.md:3
#, fuzzy
msgid ""
"In [Tutorial 1]{1}, we generated a stub project that was able to run, but we "
"didn't write any code ourselves. Let's take a look at what was generated for "
"us."
msgstr ""
"No [Tutorial 1]{1}, geramos um projeto inicial que executava, mas "
"não escrevemos nenhum código por conta própria. Vamos dar uma olhada no que "
"foi criado para nós."

#: docs/en/tutorial/tutorial-2.md:7
msgid "What was generated"
msgstr "O que foi gerado"

#: docs/en/tutorial/tutorial-2.md:9
msgid ""
"In the `src/helloworld` directory, you should see 3 files: `__init__.py`, "
"`__main__.py` and `app.py`."
msgstr ""
"No diretório `src/helloworld`, você deverá ver 3 arquivos: `__init__.py`, "
"`__main__.py` e `app.py`."

#: docs/en/tutorial/tutorial-2.md:12
msgid ""
"`__init__.py` marks the `helloworld` directory as an importable Python "
"module. It is an empty file; the very fact it exists tells the Python "
"interpreter that the `helloworld` directory defines a module."
msgstr ""
"`__init__.py` torna o diretório `helloworld` um módulo Python importável. "
"Trata-se de um arquivo vazio; sua simples existência indica ao interpretador "
"Python que há um módulo definido pelo diretório `helloworld`."

#: docs/en/tutorial/tutorial-2.md:16
msgid ""
"`__main__.py` marks the `helloworld` module as a special kind of module -an "
"executable module. If you try to run the `helloworld` module using `python -"
"m helloworld`, the `__main__.py` file is where Python will start executing. "
"The contents of `__main__.py` is relatively simple:"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:28
msgid "This file does two things:"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:30
msgid "It imports the `main` method from the `helloworld` app."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:31
#, fuzzy
msgid ""
"Then, it starts the application’s main loop. The main loop is the way a GUI "
"application listens for user input (like mouse clicks and keyboard presses)."
msgstr ""
"Isto é - ele importa o método `main` do aplicativo `helloworld`; quando "
"executado como ponto de entrada, esse método main() é chamado, dando início "
"ao loop principal da aplicação. Nesse loop, a aplicação de interface gráfica "
"(GUI) espera pelas interações do usuário (como cliques do mouse e "
"pressionamentos de teclas)."

#: docs/en/tutorial/tutorial-2.md:35
msgid ""
"The more interesting file is `app.py` - this contains the logic that creates "
"our application window:"
msgstr ""
"O arquivo mais interessante é o `app.py` - nele está contido a lógica que "
"cria a janela da nossa aplicação:"

#: docs/en/tutorial/tutorial-2.md:54
msgid "Let's go through this line by line:"
msgstr "Vamos analisar isso linha por linha:"

#: docs/en/tutorial/tutorial-2.md:61
#, fuzzy
msgid ""
"First, we import the `toga` widget toolkit, as well as some style-related "
"utility constants. Our code doesn't use these yet - but we'll make use of "
"them shortly."
msgstr ""
"Primeiro, importamos a biblioteca de widgets `toga`, juntamente com algumas "
"classes e constantes que são úteis para o estilo. Por enquanto, nosso código "
"ainda não faz uso delas, mas em breve começaremos a utilizá-las."

#: docs/en/tutorial/tutorial-2.md:65
msgid "Then, we define a class:"
msgstr "Em seguida, definimos uma classe:"

#: docs/en/tutorial/tutorial-2.md:71
msgid ""
"Each Toga application has a single `toga.App` instance, representing the "
"running entity that is the application. The app may end up managing multiple "
"windows; but for simple applications, there will be a single main window."
msgstr ""
"Cada aplicação Toga possui uma única instância chamada `toga.App`, que "
"representa o aplicativo em si sendo executado. A aplicação pode acabar "
"gerenciando várias janelas; mas para aplicativos simples, haverá uma única "
"janela principal."

#: docs/en/tutorial/tutorial-2.md:76
msgid "Next, we define a `startup()` method:"
msgstr "Depois, definimos um método chamado `startup()`:"

#: docs/en/tutorial/tutorial-2.md:83
msgid ""
"The first thing the startup method does is to define a main box. Toga's "
"layout scheme behaves similar to HTML. You build an application by "
"constructing a collection of boxes, each of which contains other boxes, or "
"actual widgets. You then apply styles to these boxes to define how they will "
"consume the available window space."
msgstr ""
"A primeira coisa que o método startup() faz é definir um container "
"principal. O esquema de layout do Toga se comporta de maneira semelhante ao "
"HTML. A construção de uma aplicação se dá por meio da criação de uma coleção "
"de containers, cada um contendo outros containers ou os widgets propriamente "
"dito. Depois, você aplica estilos a esses containers para definir como vão "
"usar o espaço na janela."

#: docs/en/tutorial/tutorial-2.md:89
msgid ""
"In this application, we define a single box, but we don't put anything into "
"it."
msgstr ""
"Neste aplicativo, definimos um único container, mas não colocamos nada "
"dentro dele."

#: docs/en/tutorial/tutorial-2.md:92
msgid "Next, we define a window into which we can put this empty box:"
msgstr ""
"Em seguida, definimos uma janela na qual podemos colocar o container vazio:"

#: docs/en/tutorial/tutorial-2.md:98
#, fuzzy
msgid ""
"This creates an instance of a `toga.MainWindow`, which will have a title "
"matching the application's name. A Main Window is a special kind of window "
"in Toga - it's a window that is closely bound to the life cycle of the app. "
"When the Main Window is closed, the application exits. The Main Window is "
"also the window that has the application's menu (if you're on a platform "
"like Windows where menu bars are part of the window)."
msgstr ""
"Isso cria uma instância de `toga.MainWindow`, que terá um título "
"correspondente ao nome do aplicativo. A MainWindow (Janela Principal) é um "
"tipo especial de janela no Toga, pois está intimamente ligada ao ciclo de "
"vida da aplicação. Quando a MainWindow é fechada, a aplicação também se "
"encerra. Além disso, a MainWindow também é a janela que contém o menu do "
"aplicativo (se você estiver em uma plataforma como o Windows, onde as barras "
"de menu fazem parte da janela)"

#: docs/en/tutorial/tutorial-2.md:106
msgid "/// admonition | Where is my window?"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:108
msgid ""
"If you have made an error in your code, the main window of the app may not "
"display. If this happens, you can type **Ctrl+C** in the terminal where you "
"started the app. This will stop the app. You can then fix the error and "
"restart the app."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:113
#: docs/en/tutorial/tutorial-2.md:148
#: docs/en/tutorial/tutorial-2.md:211
#: docs/en/tutorial/tutorial-2.md:302
#: docs/en/tutorial/tutorial-2.md:313
#: docs/en/tutorial/tutorial-2.md:324
#: docs/en/tutorial/tutorial-2.md:340
#: docs/en/tutorial/tutorial-2.md:342
#: docs/en/tutorial/tutorial-2.md:350
#: docs/en/tutorial/tutorial-2.md:352
#: docs/en/tutorial/tutorial-2.md:360
#: docs/en/tutorial/tutorial-2.md:362
msgid "///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:115
msgid ""
"We then add our empty box as the content of the main window, and instruct "
"the application to show our window:"
msgstr ""
"Então, adicionamos nosso container vazio como conteúdo da janela principal e "
"instruímos o aplicativo a mostrar nossa janela:"

#: docs/en/tutorial/tutorial-2.md:123
#, fuzzy
msgid ""
"Last of all, we define a `main()` function. This is what creates the "
"instance of our application:"
msgstr ""
"Por último, definimos um método chamado `main()`. Isso é o que cria a "
"instância de nossa aplicação:"

#: docs/en/tutorial/tutorial-2.md:131
msgid ""
"This `main()` method is the one that is imported and invoked by `__main__.py`"
". It creates and returns an instance of our `HelloWorld` application."
msgstr ""
"O método `main()` é aquele que é importado e chamado pelo arquivo "
"`__main__.py`. Ele cria e retorna uma instância da nossa aplicação "
"`HelloWorld`."

#: docs/en/tutorial/tutorial-2.md:135
msgid ""
"That's the simplest possible Toga application. Let's put some of our own "
"content into the application, and make the app do something interesting."
msgstr ""
"Essa é a aplicação Toga mais básica possível. Vamos agora integrar conteúdo "
"personalizado à aplicação e torná-la mais interessante."

#: docs/en/tutorial/tutorial-2.md:138
msgid "Adding some content of our own"
msgstr "Adicionando conteúdo personalizado"

#: docs/en/tutorial/tutorial-2.md:140
msgid "Let's do something more interesting with our `HelloWorld` app."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:142
#: docs/en/tutorial/tutorial-2.md:201
msgid "/// note | Note"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:144
#, fuzzy
msgid ""
"When you make these changes, make sure you keep the imports at the top of "
"the file, and the `main()` at the bottom of the file. You only need to "
"update the `HelloWorld` class."
msgstr ""
"Não remova as importações já feitas no topo do arquivo ou o `main()` ao "
"final. Você só precisa atualizar a classe `HelloWorld`."

#: docs/en/tutorial/tutorial-2.md:150
msgid ""
"Modify your `HelloWorld` class inside `src/helloworld/app.py` so that it "
"looks like this:"
msgstr ""
"Modifique sua classe `HelloWorld` dentro de `src/helloworld/app.py` para que "
"fique assim:"

#: docs/en/tutorial/tutorial-2.md:185
msgid "Let's look in detail at what has changed."
msgstr "Vamos ver em detalhes o que mudou."

#: docs/en/tutorial/tutorial-2.md:187
msgid "We're still creating a main box; however, we are now applying a style:"
msgstr ""
"Ainda estamos fazendo o container principal; porém, agora estamos aplicando "
"um estilo:"

#: docs/en/tutorial/tutorial-2.md:193
#, fuzzy
msgid ""
"Toga's built-in layout system is called \"Pack\". It behaves a lot like CSS. "
"You define objects in a hierarchy - in HTML, the objects are `<div>`, "
"`<span>`, and other DOM elements; in Toga, they're widgets and boxes. You "
"can then assign styles to the individual elements. In this case, we're "
"indicating that this is a `COLUMN` box - that is, it is a box that will "
"consume all the available width, and will expand its height as content is "
"added, but it will try to be as short as possible."
msgstr ""
"O Toga possui um sistema de layout interno denominado \"Pack\". Seu "
"funcionamento se assemelha ao CSS. Você define objetos em uma hierarquia - "
"no HTML, os objetos são `<div>` e `<span>`, e outros elementos do DOM; "
"enquanto no Toga, são widgets e containers. Estilos podem ser atribuídos a "
"cada elemento individualmente. Neste caso específico, estamos indicando que "
"o container é um `'COLUMN'` - isto é, ele ocupará toda a largura disponível "
"e aumentará sua altura à medida que conteúdo for adicionado, porém buscando "
"sempre ser o mais compacto possível."

#: docs/en/tutorial/tutorial-2.md:203
msgid ""
"For more advanced uses, Toga also supports a separate style object, which is "
"used like this:"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:213
msgid "Next, we define a couple of widgets:"
msgstr "A seguir, vamos definir dois widgets:"

#: docs/en/tutorial/tutorial-2.md:223
#, fuzzy
msgid ""
"Here, we define a Label and a TextInput. Both widgets have styles associated "
"with them; the label will have 5px of margin on its left and right, and no "
"margin on the top and bottom. The TextInput is marked as being flexible - "
"that is, it will absorb all available space in its layout axis."
msgstr ""
"Nesta etapa, definimos um Label e um TextInput. Ambos os widgets possuem "
"estilos associados; o Label terá 5px de preenchimento à esquerda e à "
"direita, e nenhum preenchimento na parte superior e inferior. O TextInput é "
"marcado como flexível, ou seja, ele absorverá todo o espaço disponível em "
"seu eixo de layout."

#: docs/en/tutorial/tutorial-2.md:229
msgid ""
"The TextInput is assigned as an instance variable of the class. This gives "
"us easy access to the widget instance - something that we'll use in a moment."
msgstr ""
"O TextInput é atribuído como uma variável de instância da classe. Isso nos "
"permite acessar facilmente a instância do widget, o que será utilizado em "
"breve."

#: docs/en/tutorial/tutorial-2.md:233
msgid "Next, we define a box to hold these two widgets:"
msgstr "Após isso, definimos um container para colocar esses dois widgets:"

#: docs/en/tutorial/tutorial-2.md:241
#, fuzzy
msgid ""
"The `name_box` is a box just like the main box; however, this time, it's a "
"`ROW` box. That means content will be added horizontally, and it will try to "
"make its width as narrow as possible. The box also has some margin - 5px on "
"all sides."
msgstr ""
"A container `name_box` é parecido com o container principal, só que agora "
"ele é do tipo `ROW`. Isso significa que o conteúdo será adicionado "
"horizontalmente e tentará ficar o mais estreito possível. Esse container "
"também possui preenchimento - 5px em todos os lados."

#: docs/en/tutorial/tutorial-2.md:246
msgid "Now we define a button:"
msgstr "Agora definimos um botão:"

#: docs/en/tutorial/tutorial-2.md:256
msgid ""
"The button also has 5px of margin on all sides. We also define a *handler* -"
"a method to invoke when the button is pressed."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:259
msgid "Then, we add the name box and the button to the main box:"
msgstr ""
"Então, adicionamos o container name_box e o botão ao container principal:"

#: docs/en/tutorial/tutorial-2.md:266
#, fuzzy
msgid ""
"This completes our layout; the rest of the startup method is as it was "
"previously - defining a `MainWindow`, and assigning the main box as the "
"window's content:"
msgstr ""
"Com isso, finalizamos o layout; o restante do código do método startup() "
"permanece como antes - definindo uma MainWindow (Janela principal) e a "
"atribuição do container principal como conteúdo dessa janela:"

#: docs/en/tutorial/tutorial-2.md:276
#, fuzzy
msgid ""
"The last thing we need to do is define the handler for the button. A handler "
"can be any method, generator, or asynchronous coroutine; it accepts the "
"widget that generated the event as an argument, and will be invoked whenever "
"the button is pressed:"
msgstr ""
"A última etapa consiste na definição do gatilho do botão. Um gatilho pode "
"ser qualquer método, gerador ou corrotina assíncrona; ele aceita como "
"argumento o widget que gerou o evento e será invocado sempre que o botão for "
"pressionado:"

#: docs/en/tutorial/tutorial-2.md:286
msgid ""
"The body of the method is a simple print statement - however, it will "
"interrogate the current value of the name input, and use that content as the "
"text that is printed."
msgstr ""
"O corpo do método é uma simples instrução de impressão. No entanto, ele "
"consultará o valor atual do campo de entrada de nome e usará esse conteúdo "
"como o texto a ser impresso."

#: docs/en/tutorial/tutorial-2.md:290
msgid ""
"Now that we've made these changes we can see what they look like by starting "
"the application again. As before, we'll use developer mode:"
msgstr ""
"Ao concluirmos essas alterações, podemos visualizar o resultado reiniciando "
"a aplicação. Seguindo o procedimento anterior, utilizaremos o modo de "
"desenvolvedor:"

#: docs/en/tutorial/tutorial-2.md:293
#: docs/en/tutorial/tutorial-2.md:334
msgid "/// tab | macOS"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:304
#: docs/en/tutorial/tutorial-2.md:344
msgid "/// tab | Linux"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:315
#: docs/en/tutorial/tutorial-2.md:354
msgid "/// tab | Windows"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:326
#, fuzzy
msgid ""
"You'll notice that this time, it *doesn't* install dependencies. Briefcase "
"can detect that the application has been run before, and to save time, will "
"only run the application. If you add new dependencies to your app, you need "
"to make sure that they're installed by passing in a `-r` option when you run "
"`briefcase dev`."
msgstr ""
"Dessa vez, você vai reparar que as dependências *não são* instaladas. O "
"Briefcase consegue identificar se o app já foi aberto antes e, pra "
"economizar tempo, só executa ele. Se você adicionar novas dependências, pode "
"garantir que elas sejam instaladas usando a opção `-r` quando executar o "
"comando `briefcase dev`."

#: docs/en/tutorial/tutorial-2.md:332
msgid "This should open a GUI window:"
msgstr "Isso deve abrir uma janela GUI:"

#: docs/en/tutorial/tutorial-2.md:336
msgid "![Hello World Tutorial 2 window, on macOS]{1}"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:338
#: docs/en/tutorial/tutorial-2.md:348
#: docs/en/tutorial/tutorial-2.md:358
msgid "/// caption"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:346
msgid "![Hello World Tutorial 2 window, on Linux]{1}"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:356
msgid "![Hello World Tutorial 2 window, on Windows]{1}"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:364
msgid ""
"If you enter a name in the text box, and press the GUI button, you should "
"see output appear in the console where you started the application."
msgstr ""
"Se você escrever um nome na caixa de texto e clicar no botão da interface, "
"vai ver uma mensagem aparecer no console onde você abriu a aplicação."

#: docs/en/tutorial/tutorial-2.md:368
msgid ""
"Before continuing, close the app. As with Tutorial 1, you can do this by "
"pressing the close button on the application window, by selecting Quit/Exit "
"from the application's menu, or by typing **Ctrl+C** in the terminal where "
"you ran `briefcase dev`."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:373
msgid "Next steps"
msgstr "Próximos passos"

#: docs/en/tutorial/tutorial-2.md:375
#, fuzzy
msgid ""
"We've now got an application that does something a little more interesting. "
"But it only runs on our own computer. Let's package this application for "
"distribution. In [Tutorial 3]{1}, we'll wrap our application up as a "
"standalone installer that we could send to a friend, a customer, or upload "
"to an App Store."
msgstr ""
"Criamos uma aplicação com recursos mais interessantes. Porém, ela somente "
"funciona em nosso computador. Vamos empacotar esta aplicação para "
"distribuição. No [Tutorial 3]{1}, encapsularemos nossa aplicação em "
"um instalador independente, que poderemos enviar a amigos, clientes ou "
"publicar em uma App Store."
