msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-31 22:29+0000\n"
"PO-Revision-Date: 2025-08-09 01:01+0000\n"
"Last-Translator: John <johnzhou721@gmail.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/"
"projects/beeware/tutorial/tutorial-7/zh_Hans/>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/en/tutorial/tutorial-7.md:1
msgid "Tutorial 7 - Get this (third-)party started"
msgstr "教程 7 - 使用第三方库"

#: docs/en/tutorial/tutorial-7.md:3
msgid ""
"So far, the app we've built has only used our own code, plus the code "
"provided by BeeWare. However, in a real-world app, you'll likely want to use "
"a third-party library, downloaded from the Python Package Index (PyPI)."
msgstr ""
"到目前为止，我们构建的应用程序只使用了我们自己的代码和 BeeWare "
"提供的代码。不过，在实际应用中，您很可能需要使用从 Python "
"软件包索引（PyPI）下载的第三方库。"

#: docs/en/tutorial/tutorial-7.md:8
msgid "Let's modify our app to include a third-party library."
msgstr "让我们修改应用程序，加入第三方库。"

#: docs/en/tutorial/tutorial-7.md:10
msgid "Adding a package"
msgstr "添加软件包"

#: docs/en/tutorial/tutorial-7.md:12
msgid ""
"Let's modify our application to say a little bit more than just "
"\"Hi, there!\"."
msgstr "让我们修改我们的应用程序，使其能够显示比“你好！”更丰富的内容。"

#: docs/en/tutorial/tutorial-7.md:15
msgid ""
"To generate some more interesting text for the dialog, we're going to use a "
"library called [Faker]{1}. Faker is a Python package that generates fake "
"content, including names and text blocks. The names and words in the text "
"block are generated from an arbitrary list of words provided by Faker. We're "
"going to use Faker to construct a fake message, as if someone is responding "
"to the user."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:23
msgid ""
"We start by adding `faker` to our app. Add an import to the top of the "
"`app.py` to import `faker`:"
msgstr "我们开始吧 `faker` 添加到我们的应用程序中。在 `app.py` 的最上方加入一个导入，"
"用于导入 `faker`:"

#: docs/en/tutorial/tutorial-7.md:30
msgid "Then modify the `say_hello()` callback so it looks like this:"
msgstr "然后修改 `say_hello()` 回调，使其看起来像这样:"

#: docs/en/tutorial/tutorial-7.md:43
msgid ""
"Let's run our updated app in Briefcase developer mode to check that our "
"change has worked."
msgstr "让我们在 Briefcase 开发者模式下运行更新后的应用程序，检查我们的更改是否有效。"

#: docs/en/tutorial/tutorial-7.md:46
#: docs/en/tutorial/tutorial-7.md:130
#: docs/en/tutorial/tutorial-7.md:207
#: docs/en/tutorial/tutorial-7.md:555
msgid "/// tab | macOS"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:66
#: docs/en/tutorial/tutorial-7.md:88
#: docs/en/tutorial/tutorial-7.md:110
#: docs/en/tutorial/tutorial-7.md:117
#: docs/en/tutorial/tutorial-7.md:124
#: docs/en/tutorial/tutorial-7.md:144
#: docs/en/tutorial/tutorial-7.md:146
#: docs/en/tutorial/tutorial-7.md:162
#: docs/en/tutorial/tutorial-7.md:164
#: docs/en/tutorial/tutorial-7.md:180
#: docs/en/tutorial/tutorial-7.md:182
#: docs/en/tutorial/tutorial-7.md:189
#: docs/en/tutorial/tutorial-7.md:196
#: docs/en/tutorial/tutorial-7.md:245
#: docs/en/tutorial/tutorial-7.md:247
#: docs/en/tutorial/tutorial-7.md:302
#: docs/en/tutorial/tutorial-7.md:342
#: docs/en/tutorial/tutorial-7.md:344
#: docs/en/tutorial/tutorial-7.md:419
#: docs/en/tutorial/tutorial-7.md:467
#: docs/en/tutorial/tutorial-7.md:576
#: docs/en/tutorial/tutorial-7.md:605
#: docs/en/tutorial/tutorial-7.md:628
#: docs/en/tutorial/tutorial-7.md:647
#: docs/en/tutorial/tutorial-7.md:671
#: docs/en/tutorial/tutorial-7.md:682
msgid "///"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:68
#: docs/en/tutorial/tutorial-7.md:148
#: docs/en/tutorial/tutorial-7.md:249
#: docs/en/tutorial/tutorial-7.md:578
msgid "/// tab | Linux"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:90
#: docs/en/tutorial/tutorial-7.md:166
#: docs/en/tutorial/tutorial-7.md:304
#: docs/en/tutorial/tutorial-7.md:607
msgid "/// tab | Windows"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:112
#: docs/en/tutorial/tutorial-7.md:184
#: docs/en/tutorial/tutorial-7.md:346
#: docs/en/tutorial/tutorial-7.md:630
msgid "/// tab | Android"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:114
#: docs/en/tutorial/tutorial-7.md:186
msgid ""
"You can't run an Android app in developer mode - use the instructions for "
"your chosen desktop platform."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:119
#: docs/en/tutorial/tutorial-7.md:191
#: docs/en/tutorial/tutorial-7.md:421
#: docs/en/tutorial/tutorial-7.md:649
msgid "/// tab | iOS"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:121
#: docs/en/tutorial/tutorial-7.md:193
msgid ""
"You can't run an iOS app in developer mode - use the instructions for your "
"chosen desktop platform."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:126
msgid ""
"What happened? We've added `faker` to our *code*, but we haven't added it to "
"our development virtual environment. We can fix this by installing `faker` "
"with `pip`, and then re-running `briefcase dev`:"
msgstr ""
"发生了什么？我们已经将 `faker` 添加到我们的\\ *代码*\\ "
"中，但我们还没有将它添加到我们的开发虚拟环境中。要解决这个问题，我们可以用 "
"`pip` 安装 `faker`，然后重新运行 `briefcase dev`："

#: docs/en/tutorial/tutorial-7.md:137
#: docs/en/tutorial/tutorial-7.md:155
#: docs/en/tutorial/tutorial-7.md:173
msgid ""
"When you enter a name and press the button, you should see a dialog that "
"looks something like:"
msgstr "输入名称并按下按钮后，您会看到一个类似如下的对话框："

#: docs/en/tutorial/tutorial-7.md:140
msgid "![Hello World Tutorial 7 dialog, on macOS]{1}"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:142
#: docs/en/tutorial/tutorial-7.md:160
#: docs/en/tutorial/tutorial-7.md:178
#: docs/en/tutorial/tutorial-7.md:243
#: docs/en/tutorial/tutorial-7.md:340
msgid "/// caption"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:158
msgid "![Hello World Tutorial 7 dialog, on Linux]{1}"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:176
msgid "![Hello World Tutorial 7 dialog, on Windows]{1}"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:198
msgid ""
"We've now got a working app, using a third party library, running in "
"development mode!"
msgstr "现在，我们已经有了一个可正常运行的应用程序，它使用第三方库，并以开发模式运行"
"！"

#: docs/en/tutorial/tutorial-7.md:201
msgid "Running the updated app"
msgstr "运行更新后的应用程序"

#: docs/en/tutorial/tutorial-7.md:203
#, fuzzy
msgid ""
"Let's get this updated application code packaged as a standalone app. Since "
"we've made code changes, we need to follow the same steps as in [Tutorial 4]"
"{1}:"
msgstr ""
"让我们将更新后的应用程序代码打包为独立应用程序。由于我们对代码进行了修改，"
"因此需要遵循 [Tutorial 4<tutorial-4>` 中的相同步骤："

#: docs/en/tutorial/tutorial-7.md:209
#: docs/en/tutorial/tutorial-7.md:251
#: docs/en/tutorial/tutorial-7.md:306
#: docs/en/tutorial/tutorial-7.md:348
#: docs/en/tutorial/tutorial-7.md:423
#, fuzzy
msgid "Update the code in the packaged app:"
msgstr "更新打包应用程序中的代码："

#: docs/en/tutorial/tutorial-7.md:220
#: docs/en/tutorial/tutorial-7.md:262
#: docs/en/tutorial/tutorial-7.md:317
#: docs/en/tutorial/tutorial-7.md:359
#: docs/en/tutorial/tutorial-7.md:434
#, fuzzy
msgid "Rebuild the app:"
msgstr "重建应用程序："

#: docs/en/tutorial/tutorial-7.md:229
#: docs/en/tutorial/tutorial-7.md:276
#: docs/en/tutorial/tutorial-7.md:326
#, fuzzy
msgid "And finally, run the app:"
msgstr "最后，运行应用程序："

#: docs/en/tutorial/tutorial-7.md:238
#: docs/en/tutorial/tutorial-7.md:335
#, fuzzy
msgid ""
"However, when the app runs, you'll see an error in the console, plus a crash "
"dialog:"
msgstr "但是，当程序运行时，你会在控制台中看到一个错误，还有一个崩溃对话框："

#: docs/en/tutorial/tutorial-7.md:241
msgid "![Hello World Tutorial 7 app crash, on macOS]{1}"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:285
#: docs/en/tutorial/tutorial-7.md:378
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console:"
msgstr "但是，当应用程序运行时，您会在控制台中看到一个错误："

#: docs/en/tutorial/tutorial-7.md:338
msgid "![Hello World Tutorial 7 app crash, on Windows]{1}"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:369
#: docs/en/tutorial/tutorial-7.md:444
msgid "And finally, run the app (selecting a simulator when prompted):"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:454
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console"
msgstr "但是，当应用程序运行时，您会在控制台中看到一个错误："

#: docs/en/tutorial/tutorial-7.md:469
msgid ""
"Once again, the app has failed to start because `faker` has not been "
"installed - but why? Haven't we already installed `faker`?"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:472
#, fuzzy
msgid ""
"We have - but only in the development environment. Your development "
"environment is entirely local to your machine - and is only enabled when you "
"explicitly activate it. Although Briefcase has a development mode, the main "
"reason you'd use Briefcase is to package up your code so you can give it to "
"someone else."
msgstr ""
"我们有，但仅限于开发环境。你的开发环境完全在你的机器本地，只有当你明确激活它"
"时才会启用。虽然公文包有开发模式，但使用公文包的主要原因是打包你的代码，这样"
"你就可以把它交给别人。"

#: docs/en/tutorial/tutorial-7.md:478
#, fuzzy
msgid ""
"The only way to guarantee that someone else will have a Python environment "
"that contains everything it needs is to build a completely isolated Python "
"environment. This means there's a completely isolated Python install, and a "
"completely isolated set of dependencies. This is what Briefcase is building "
"when you run `briefcase build` - an isolated Python environment. This also "
"explains why `faker` isn't installed - it has been installed in your "
"*development* environment, but not in the packaged app."
msgstr ""
"要保证别人的 Python 环境包含它所需要的一切，唯一的办法就是构建一个完全隔离的 "
"Python 环境。这意味着有一个完全独立的 Python 安装，和一套完全独立的依赖关系。"
"这就是当你运行 `briefcase build` 时，Briefcase 正在构建的 - 一个隔离的 "
"Python 环境。这也解释了为什么没有安装 `httpx` - "
"它已经安装在你的开发环境中，但没有安装在打包的应用程序中。"

#: docs/en/tutorial/tutorial-7.md:487
#, fuzzy
msgid "So - we need to tell Briefcase that our app has an external dependency."
msgstr "因此，我们需要告诉 Briefcase，我们的应用程序有一个外部依赖关系。"

#: docs/en/tutorial/tutorial-7.md:489
#, fuzzy
msgid "Updating dependencies"
msgstr "更新依赖项"

#: docs/en/tutorial/tutorial-7.md:491
#, fuzzy
msgid ""
"In the root directory of your app, there is a file named `pyproject.toml`. "
"This file contains all the app configuration details that you provided when "
"you originally ran `briefcase new`."
msgstr ""
"在应用程序的根目录中，有一个名为 `pyproject.toml` 的文件。"
"该文件包含您最初运行 `briefcase new` 时提供的所有应用程序配置详细信息。"

#: docs/en/tutorial/tutorial-7.md:495
#, fuzzy
msgid ""
"`pyproject.toml` is broken up into sections; one of the sections describes "
"the settings for your app:"
msgstr "pyproject.toml \"分为多个部分，其中一部分描述了应用程序的设置：："

#: docs/en/tutorial/tutorial-7.md:508
#, fuzzy
msgid ""
"The `requires` option describes the dependencies of our application. It is a "
"list of strings, specifying libraries (and, optionally, versions) of "
"libraries that you want to be included with your app."
msgstr "requires \"选项描述了应用程序的依赖关系"
"。它是一个字符串列表，其中指定了您希望应用程序包含的库（以及可选的版本）。"

#: docs/en/tutorial/tutorial-7.md:512
#, fuzzy
msgid "Modify the `requires` setting so that it reads:"
msgstr "修改 `requires` 设置为：："

#: docs/en/tutorial/tutorial-7.md:520
#, fuzzy
msgid ""
"By adding this setting, we're telling Briefcase \"when you build my app, run "
"`pip install faker` into the application bundle\". Anything that would be "
"legal input to `pip install` can be used here - so, you could specify:"
msgstr ""
"通过添加此设置，我们告诉 Briefcase "
"\"当你构建我的应用程序时，运行 `pip install httpx` 到应用程序捆绑包中\"。"
"任何可以合法输入到 `pip install` 的内容都可以在这里使用--因此，你可以指定："

#: docs/en/tutorial/tutorial-7.md:525
#, fuzzy
msgid "A specific library version (e.g., `\"faker==37.3.0\"`);"
msgstr "特定的库版本（例如， `\"httpx===0.19.0\"` ）;"

#: docs/en/tutorial/tutorial-7.md:526
#, fuzzy
msgid "A range of library versions (e.g., `\"faker>=37\"`);"
msgstr "一系列库版本（例如， `\"httpx>=0.19\"` ）;"

#: docs/en/tutorial/tutorial-7.md:527
#, fuzzy
msgid ""
"A path to a git repository (e.g., `\"git+https://github.com/joke2k/faker/\""
"`); or"
msgstr "指向 git 仓库的路径（例如，`\"git+https://github.com/encode/httpx\"`）；或"

#: docs/en/tutorial/tutorial-7.md:529
msgid ""
"A local file path (However - be warned: if you give your code to someone "
"else, this path probably won't exist on their machine!)"
msgstr "本地文件路径（不过需要注意的是：如果你把代码交给别人，这个路径很可能不存在于"
"他们的机器上！）"

#: docs/en/tutorial/tutorial-7.md:532
#, fuzzy
msgid ""
"Further down in `pyproject.toml`, you'll notice other sections that are "
"operating system dependent, like `[tool.briefcase.app.helloworld.macOS]` and "
"`[tool.briefcase.app.helloworld.windows]`. These sections *also* have a "
"`requires` setting. These settings allow you to define additional platform-"
"specific dependencies - so, for example, if you need a platform-specific "
"library to handle some aspect of your app, you can specify that library in "
"the platform-specific `requires` section, and that setting will only be used "
"for that platform. You will notice that the `toga` libraries are all "
"specified in the platform-specific `requires` section - this is because the "
"libraries needed to display a user interface are platform specific."
msgstr ""
"在 `pyproject.toml` 中的更下面部分，你会注意到与操作系统相关的其他部分，如 `"
"[tool.briefcase.app.helloworld.macOS]` 和 `"
"[tool.briefcase.app.helloworld.windows]`。这些部分**也有一个 `requires` "
"设置。这些设置允许你定义额外的特定平台依赖关系，例如，如果你需要一个特定平台"
"的库来处理应用程序的某些方面，你可以在特定平台的 `requires` "
"部分中指定该库，而该设置将仅用于该平台。你会注意到，所有的 `toga` "
"库都是在特定平台的 `requires` "
"部分中指定的，这是因为显示用户界面所需的库都是特定平台的。"

#: docs/en/tutorial/tutorial-7.md:544
#, fuzzy
msgid ""
"In our case, we want `faker` to be installed on all platforms, so we use the "
"app-level `requires` setting. The app-level dependencies will always be "
"installed; the platform-specific dependencies are installed *in addition* to "
"the app-level ones."
msgstr ""
"在我们的例子中，我们希望 `httpx` 安装在所有平台上，因此使用了应用程序级的 "
"`requires` "
"设置。应用程序级的依赖项始终会被安装；特定平台的依赖项会在应用程序级的依赖项"
"之外*安装。"

#: docs/en/tutorial/tutorial-7.md:549
#, fuzzy
msgid ""
"Now that we've told Briefcase about our additional requirements, we can try "
"packaging our app again. Ensure that you've saved your changes to "
"`pyproject.toml`, and then update your app again - this time, passing in the "
"`-r` flag. This tells Briefcase to update requirements in the packaged app:"
msgstr ""
"既然我们已经告诉了 Briefcase "
"我们的额外需求，那么我们就可以再次尝试打包应用程序了。确保已将更改保存到 "
"`pyproject.toml`，然后再次更新应用程序--这一次，传递 `-r` 标志。这将告诉 "
"Briefcase 更新打包应用程序中的需求："

#: docs/en/tutorial/tutorial-7.md:673
#, fuzzy
msgid ""
"Once you've updated, you can run `briefcase build` and `briefcase run` - and "
"you should see your packaged app, with the new dialog behavior."
msgstr ""
"更新完成后，您可以运行 `briefcase build` 和 `briefcase run` - "
"您应该会看到打包后的应用程序，并带有新的对话框行为。"

#: docs/en/tutorial/tutorial-7.md:676
msgid "/// note | Note"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:678
#, fuzzy
msgid ""
"The `-r` option for updating requirements is also honored by the `build` and "
"`run` command, so if you want to update, build, and run in one step, you "
"could use `briefcase run -u -r`."
msgstr ""
"用于更新需求的 `-r` 选项也会被 `build` 和 `run` "
"命令接受，因此如果你想一步完成更新、编译和运行，可以使用 `briefcase run -u "
"-r`。"

#: docs/en/tutorial/tutorial-7.md:684
msgid "Third-Party Python Packages for Mobile and Web"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:686
msgid ""
"Faker is just one example of a third-party Python package - a collection of "
"code that isn't part what Python provides out of the box. These third-party "
"packages are most commonly distributed using the "
"[Python Package Index (PyPI)]{1}, and installed into your local virtual "
"environment. We've been using `pip` in this tutorial, but there are other "
"options."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:693
#, fuzzy
msgid ""
"On desktop platforms (macOS, Windows, Linux), essentially any package on "
"PyPI package can be installed into your virtual environment, or added to "
"your app's requirements. However, when building an app for mobile or web "
"platforms, [your options are slightly limited]{1}."
msgstr ""
"在桌面平台（macOS、Windows、Linux）上，任何可安装的 \"pip \""
"都可以添加到您的需求中。在移动和网络平台上，[您的选择略显有限]{1}。"

#: docs/en/tutorial/tutorial-7.md:699
msgid ""
"In short; any *pure Python* package (i.e. any package created from a project "
"written *only* in Python) can be used without difficulty. Some packages, "
"though, are created from projects that contain both Python and other "
"languages (e.g. C, C++, Rust, etc). Code written in those languages needs to "
"be compiled to platform-specific binary modules before it can be used, and "
"those pre-compiled binary modules are only available on specific platforms. "
"Mobile and web platforms have very different requirements than \"standard\" "
"desktop platforms. At this time, most Python packages don't provide pre-"
"compiled binaries for mobile and web platforms."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:710
msgid ""
"On PyPI, packages are often provided in a pre-built distribution format "
"called *wheels*. To check whether a package is pure Python, look at the PyPI "
"downloads page for the project. If the wheels provided have a `-py3-none-"
"any.whl` suffix (e.g., [Faker]{1}), then they are pure Python wheels. "
"However, if the wheels have version and platform-specific extensions (e.g., "
"[Pillow]{2}, which has wheels with suffixes like "
"`-cp313-cp313-macosx_11_0_arm64.whl` and `-cp39-cp39-win_amd64.whl`), then "
"the wheel *contains a binary component*. That package cannot be installed on "
"mobile or web platforms unless a wheel compatible with those platforms has "
"been provided."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:723
msgid ""
"At this time, *most* binary packages on PyPI don't provide mobile- or web-"
"compatible wheels. To fill this gap, BeeWare provides binaries for some "
"popular binary modules (including `numpy`, `pandas`, and `cryptography`). "
"These wheels are *not* distributed on PyPI, but Briefcase will install those "
"wheels if they're available."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:729
msgid ""
"It's *usually* possible to compile binary packages for mobile platforms, but "
"it's not easy to set up -- well outside the scope of an introductory "
"tutorial like this one."
msgstr "*通常*\\ "
"可以为移动平台编译二进制软件包，但是不容易设置，且远超出了本教程这样的入门教"
"程涵盖的范围。"

#: docs/en/tutorial/tutorial-7.md:733
msgid "Next steps"
msgstr "下一步"

#: docs/en/tutorial/tutorial-7.md:735
msgid ""
"We've now got an app that uses a third-party library! In [Tutorial 8]{1} "
"we'll learn how to ensure our app remains responsive as we add more complex "
"application logic."
msgstr ""
