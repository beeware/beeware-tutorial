msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-14 23:09-0400\n"
"PO-Revision-Date: 2025-06-07 05:01+0000\n"
"Last-Translator: John <johnzhou721@gmail.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/"
"projects/beeware/tutorial/topics/testing/zh_Hans/>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/en/tutorial/topics/testing.md:1
msgid "Testing times { id=\"testing\" }"
msgstr ""

#: docs/en/tutorial/topics/testing.md:3
msgid ""
"Most software development doesn't involve writing new code - it's modifying "
"existing code. Ensuring that existing code continues to work in the way we "
"expect is a key part of the software development process. One way to do "
"ensure the behavior of our app is with a *test suite*."
msgstr ""
"大多数软件开发并不涉及编写新代码，而是修改现有代码。确保现有代码以我们期望的"
"方式继续正常工作是软件开发过程的关键部分。"
"确保应用程序行为的方法之一是使用一个\\ *测试套件*。"

#: docs/en/tutorial/topics/testing.md:8
msgid "Running the test suite"
msgstr "运行测试套件"

#: docs/en/tutorial/topics/testing.md:10
msgid ""
"It turns out the project from the core tutorial already has a test suite! "
"When we originally generated our project, two top-level directories were "
"generated: `src` and `tests`. The `src` folder contains the code for our app;"
" the `tests` folder contains our test suite. Inside the `tests` folder is a "
"file named `test_app.py` with the following content:"
msgstr ""
"原来我们的项目已经有了一个测试套件！我们最初生成项目时，会生成两个顶级目录：["
"`src`\\ 和\\ `tests`。`src`\\ 文件夹包含应用程序的代码；`tests`\\ "
"文件夹包含测试套件。在\\ `tests`\\ 文件夹中，有一个名为\\ `test_app.py`\\ "
"的文件，内容如下:"

#: docs/en/tutorial/topics/testing.md:21
msgid ""
"This is a [Pytest]{1} *test case* - a block of code that can be executed to "
"verify some behavior of your app. In this case, the test is a placeholder, "
"and doesn't test anything about our app - but it is a test that we can "
"perform."
msgstr ""

#: docs/en/tutorial/topics/testing.md:26
msgid ""
"We can run this test suite using the `--test` option to `briefcase dev`. As "
"this is the first time we are running tests, we also need to pass in the `-r`"
" option to ensure that the test requirements are also installed:"
msgstr ""
"我们可以使用 `briefcase dev` 的 `--test` "
"选项来运行这个测试套件。由于这是第一次运行测试，我们还需要传递 `-r` "
"选项，以确保测试以来想也已安装："

#: docs/en/tutorial/topics/testing.md:30
#: docs/en/tutorial/topics/testing.md:141
#: docs/en/tutorial/topics/testing.md:215
#: docs/en/tutorial/topics/testing.md:337
#: docs/en/tutorial/topics/testing.md:411
msgid "/// tab | macOS"
msgstr ""

#: docs/en/tutorial/topics/testing.md:53
#: docs/en/tutorial/topics/testing.md:81
#: docs/en/tutorial/topics/testing.md:109
#: docs/en/tutorial/topics/testing.md:158
#: docs/en/tutorial/topics/testing.md:177
#: docs/en/tutorial/topics/testing.md:196
#: docs/en/tutorial/topics/testing.md:247
#: docs/en/tutorial/topics/testing.md:283
#: docs/en/tutorial/topics/testing.md:317
#: docs/en/tutorial/topics/testing.md:355
#: docs/en/tutorial/topics/testing.md:375
#: docs/en/tutorial/topics/testing.md:395
#: docs/en/tutorial/topics/testing.md:453
#: docs/en/tutorial/topics/testing.md:487
#: docs/en/tutorial/topics/testing.md:526
msgid "///"
msgstr ""

#: docs/en/tutorial/topics/testing.md:55
#: docs/en/tutorial/topics/testing.md:160
#: docs/en/tutorial/topics/testing.md:249
#: docs/en/tutorial/topics/testing.md:357
#: docs/en/tutorial/topics/testing.md:455
msgid "/// tab | Linux"
msgstr ""

#: docs/en/tutorial/topics/testing.md:83
#: docs/en/tutorial/topics/testing.md:179
#: docs/en/tutorial/topics/testing.md:285
#: docs/en/tutorial/topics/testing.md:377
#: docs/en/tutorial/topics/testing.md:489
msgid "/// tab | Windows"
msgstr ""

#: docs/en/tutorial/topics/testing.md:112
msgid ""
"Success! We've just executed a single test that verifies Python math works "
"in the way we'd expect (What a relief!)."
msgstr "成功了！我们刚刚执行了一个测试，验证了 Python "
"数学以我们预期的方式运行（真是松了一口气！）。"

#: docs/en/tutorial/topics/testing.md:115
msgid ""
"Let's replace this placeholder test with a test to verify that our "
"`greeting()` method behaves the way we'd expect. Replace the contents of "
"`test_app.py` with the following:"
msgstr ""
"让我们用一个测试来替换这个占位符测试，以验证我们的 `greeting()` "
"方法是否按照我们预期的方式运行。用以下内容替换 `test_app.py` 中的内容:"

#: docs/en/tutorial/topics/testing.md:133
msgid ""
"This defines two new tests, verifying the two behaviors we expect to see: "
"the output when a name is provided, and the output when the name is empty."
msgstr "这将定义两个新测试，验证我们期望看到的两种行为：提供名称时的输出和名称为空时"
"的输出。"

#: docs/en/tutorial/topics/testing.md:137
msgid ""
"We can now re-run the test suite. This time, we don't need to provided the "
"`-r` option, as the test requirements have already been installed; we only "
"need to use the `--test` option:"
msgstr "现在我们可以重新运行测试套件。这一次，我们不需要提供 `-r` "
"选项，因为测试需求已经安装完毕；我们只需要使用 `--test` 选项："

#: docs/en/tutorial/topics/testing.md:199
msgid "Excellent! Our `greeting()` utility method is working as expected."
msgstr "非常好！我们的 `greeting()` 实用程序方法如期工作了。"

#: docs/en/tutorial/topics/testing.md:201
msgid "Test driven development"
msgstr "测试驱动开发"

#: docs/en/tutorial/topics/testing.md:203
msgid ""
"Now that we have a test suite, we can use it to drive the development of new "
"features. Let's modify our app to have a special greeting for one particular "
"user. We can start by adding a test case for the new behavior that we'd like "
"to see to the bottom of `test_app.py`:"
msgstr ""
"现在我们有了测试套件，可以用它来推动新功能的开发。让我们修改应用程序，为某位"
"用户添加特殊的问候语。首先，我们可以在 `test_app.py` "
"的底部为我们希望看到的新行为添加一个测试用例:"

#: docs/en/tutorial/topics/testing.md:213
msgid "Then, run the test suite with this new test:"
msgstr "然后，用这个新测试运行测试套件："

#: docs/en/tutorial/topics/testing.md:320
msgid ""
"This time, we see a test failure - and the output explains the source of the "
"failure: the test is expecting the output \"BeeWare the IDEs of Python!\", "
"but our implementation of `greeting()` is returning \"Hello, Brutus\". Let's "
"modify the implementation of `greeting()` in `src/helloworld/app.py` to have "
"the new behavior:"
msgstr ""
"这一次，我们看到了测试失败--输出结果解释了失败的原因：测试期望输出 "
"\"BeeWare the IDEs of Python!\"，但我们的 `greeting()` 实现却返回 "
"\"Hello, Brutus\"。让我们修改 `src/helloworld/app.py` 中 `greeting()` "
"的实现，使其具有新的行为:"

#: docs/en/tutorial/topics/testing.md:335
msgid "If we run the tests again, we'll now see our tests pass:"
msgstr "如果我们再次运行测试，就会发现测试通过了："

#: docs/en/tutorial/topics/testing.md:398
msgid "Runtime tests"
msgstr "运行时测试"

#: docs/en/tutorial/topics/testing.md:400
msgid ""
"So far, we've been running the tests in development mode. This is especially "
"useful when you're developing new features, as you can rapidly iterate on "
"adding tests, and adding code to make those tests pass. However, at some "
"point, you'll want to verify that your code also runs correctly when inside "
"the bundle app environment."
msgstr ""
"到目前为止，我们一直在开发模式下运行测试。这在开发新功能时尤其有用，因为您可"
"以快速迭代添加测试，并添加代码使测试通过。不过，在某些情况下，您会希望验证您"
"的代码在捆绑应用程序环境下是否也能正确运行。"

#: docs/en/tutorial/topics/testing.md:406
msgid ""
"The `--test` and `-r` options can also be passed to the `run` command. If "
"you use `briefcase run --test -r`, the same test suite will run, but it will "
"run inside the packaged application bundle rather than your development "
"environment:"
msgstr ""
"`-test` 和 `-r` 选项也可以传递给 `run` 命令。如果使用 `briefcase run --test "
"-r`，将运行相同的测试套件，但它将在打包的应用程序捆绑包内运行，而不是在开发环"
"境中运行："

#: docs/en/tutorial/topics/testing.md:529
msgid ""
"As with `briefcase dev --test`, the `-r` option is only needed the first "
"time you run the test suite to ensure that the test dependencies are "
"present. On subsequent runs, you can omit this option."
msgstr ""
"与 `briefcase dev --test` 一样，只有在第一次运行测试套件时才需要使用 `-r` "
"选项，以确保测试依赖项的存在。以后运行时，可以省略该选项。"

#: docs/en/tutorial/topics/testing.md:533
msgid ""
"You can also use the `--test` option on mobile backends: - so `briefcase run "
"iOS --test` and `briefcase run android --test` will both work, running the "
"test suite on the mobile device you select."
msgstr ""
"你也可以在移动后端使用 `--test` 选项：`briefcase run iOS --test` 和 `"
"briefcase run android --test`` 都可以在你选择的移动设备上运行测试套件。"

#~ msgid "Testing times"
#~ msgstr "测试的时候"
