msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-15 23:26-0400\n"
"PO-Revision-Date: 2025-07-07 01:02+0000\n"
"Last-Translator: John <johnzhou721@gmail.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/"
"projects/beeware/tutorial/tutorial-2/zh_Hans/>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/en/tutorial/tutorial-2.md:1
msgid "Tutorial 2 - Making it interesting { id=\"tutorial-2\" }"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:3
msgid ""
"In [Tutorial 1][tutorial-1], we generated a stub project that was able to "
"run, but we didn't write any code ourselves. Let's take a look at what was "
"generated for us."
msgstr ""
"在 [教程 1<tutorial-1>` "
"中，我们生成了一个可以运行的基础项目，但我们自己并没有编写任何代码。"
"让我们看看 Briefcase 为我们生成了什么。"

#: docs/en/tutorial/tutorial-2.md:7
msgid "What was generated"
msgstr "生成的内容"

#: docs/en/tutorial/tutorial-2.md:9
msgid ""
"In the `src/helloworld` directory, you should see 3 files: `__init__.py`, "
"`__main__.py` and `app.py`."
msgstr ""
"在 `src/helloworld` 目录中，你应该看到 3 个文件：`__init__.py`、`__main__.py`"
" 和 `app.py`。"

#: docs/en/tutorial/tutorial-2.md:12
msgid ""
"`__init__.py` marks the `helloworld` directory as an importable Python "
"module. It is an empty file; the very fact it exists tells the Python "
"interpreter that the `helloworld` directory defines a module."
msgstr ""
"`__init__.py` 将 `helloworld` 目录标记为可导入的 Python "
"模块。这是一个空文件；它的存在告诉 Python 解释器 helloworld "
"目录定义了一个模块。"

#: docs/en/tutorial/tutorial-2.md:16
msgid ""
"`__main__.py` marks the `helloworld` module as a special kind of module -an "
"executable module. If you try to run the `helloworld` module using `python -"
"m helloworld`, the `__main__.py` file is where Python will start executing. "
"The contents of `__main__.py` is relatively simple:"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:28
msgid "This file does two things:"
msgstr "此文件做以下两件事："

#: docs/en/tutorial/tutorial-2.md:30
msgid "It imports the `main` method from the `helloworld` app."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:31
msgid ""
"Then, it starts the application’s main loop. The main loop is the way a GUI "
"application listens for user input (like mouse clicks and keyboard presses)."
msgstr "然后，它会开始应用程序的主循环，以便侦听用户输入（例如鼠标点击或键盘按键）。"

#: docs/en/tutorial/tutorial-2.md:35
msgid ""
"The more interesting file is `app.py` - this contains the logic that creates "
"our application window:"
msgstr "更有趣的文件是 `app.py` - 它包含创建我们应用程序窗口的逻辑:"

#: docs/en/tutorial/tutorial-2.md:54
msgid "Let's go through this line by line:"
msgstr "让我们逐行查看:"

#: docs/en/tutorial/tutorial-2.md:61
msgid ""
"First, we import the `toga` widget toolkit, as well as some style-related "
"utility constants. Our code doesn't use these yet - but we'll make use of "
"them shortly."
msgstr "首先，我们导入 `toga` "
"控件工具包，以及一些与样式相关的实用常量。目前我们的代码还没有使用这些——但我"
"们很快就会用到它们。"

#: docs/en/tutorial/tutorial-2.md:65
msgid "Then, we define a class:"
msgstr "然后，我们定义了一个类 :"

#: docs/en/tutorial/tutorial-2.md:71
msgid ""
"Each Toga application has a single `toga.App` instance, representing the "
"running entity that is the application. The app may end up managing multiple "
"windows; but for simple applications, there will be a single main window."
msgstr ""
"每个 Toga 应用程序都有一个 `toga.App` "
"实例，代表应用程序的运行实体。应用程序最终可能会管理多个窗口；但是对于简单的"
"应用程序来说，可能只有一个主窗口。"

#: docs/en/tutorial/tutorial-2.md:76
msgid "Next, we define a `startup()` method:"
msgstr "接下来，我们定义一个 `startup()` 方法 (startup意为启动):"

#: docs/en/tutorial/tutorial-2.md:83
msgid ""
"The first thing the startup method does is to define a main box. Toga's "
"layout scheme behaves similar to HTML. You build an application by "
"constructing a collection of boxes, each of which contains other boxes, or "
"actual widgets. You then apply styles to these boxes to define how they will "
"consume the available window space."
msgstr ""
"startup 方法的第一件事是定义一个主盒子 (main box)。Toga 的布局方案类似于 "
"HTML。你通过构造一系列盒子 (box) 来构建应用程序，"
"每个盒子包含其他盒子或实际的控件 (widgets)。然后，你对这些盒子应用样式 "
"(styles)，以定义它们将如何消耗可用的窗口空间 (window space)。"

#: docs/en/tutorial/tutorial-2.md:89
msgid ""
"In this application, we define a single box, but we don't put anything into "
"it."
msgstr "在这个应用程序中，我们定义了一个单独的空盒子 (我们没有放任何东西进去)。"

#: docs/en/tutorial/tutorial-2.md:92
msgid "Next, we define a window into which we can put this empty box:"
msgstr "接下来，我们定义一个可以将这个空盒子放入其中的窗口:"

#: docs/en/tutorial/tutorial-2.md:98
msgid ""
"This creates an instance of a `toga.MainWindow`, which will have a title "
"matching the application's name. A Main Window is a special kind of window "
"in Toga - it's a window that is closely bound to the life cycle of the app. "
"When the Main Window is closed, the application exits. The Main Window is "
"also the window that has the application's menu (if you're on a platform "
"like Windows where menu bars are part of the window)."
msgstr ""
"这将创建一个 `toga.MainWindow` 的实例，它的标题 (title) 将与应用程序的名称 "
"(self.formal_name) 匹配。主窗口是 Toga 中的一种特殊窗口——"
"它与应用程序的生命周期 (life cycle) "
"密切绑定。主窗口关闭，应用程序就退出了。主窗口也具有应用程序菜单（例如类似 "
"Windows 这样的平台上，菜单栏是窗口的一部分）。"

#: docs/en/tutorial/tutorial-2.md:106
msgid "/// admonition | Where is my window?"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:108
msgid ""
"If you have made an error in your code, the main window of the app may not "
"display. If this happens, you can type **Ctrl+C** in the terminal where you "
"started the app. This will stop the app. You can then fix the error and "
"restart the app."
msgstr ""
"如果你写的代码中有错误，app的主窗口可能不会显示。要是真这样了，你可以找到先前"
"启动app的终端窗口，并在其中按下\\ **Ctrl + "
"C**，以终止app运行。之后，你就可以修改代码里的错误，再重启app。"

#: docs/en/tutorial/tutorial-2.md:113
#: docs/en/tutorial/tutorial-2.md:148
#: docs/en/tutorial/tutorial-2.md:211
#: docs/en/tutorial/tutorial-2.md:302
#: docs/en/tutorial/tutorial-2.md:313
#: docs/en/tutorial/tutorial-2.md:324
#: docs/en/tutorial/tutorial-2.md:340
#: docs/en/tutorial/tutorial-2.md:348
#: docs/en/tutorial/tutorial-2.md:356
msgid "///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:115
msgid ""
"We then add our empty box as the content of the main window, and instruct "
"the application to show our window:"
msgstr "然后，我们将空盒子作为主窗口的内容，并指示应用程序显示我们的窗口:"

#: docs/en/tutorial/tutorial-2.md:123
msgid ""
"Last of all, we define a `main()` function. This is what creates the "
"instance of our application:"
msgstr "最后，我们定义一个 `main()` 方法。它将创建应用程序的实例:"

#: docs/en/tutorial/tutorial-2.md:131
msgid ""
"This `main()` method is the one that is imported and invoked by `__main__.py`"
". It creates and returns an instance of our `HelloWorld` application."
msgstr "这个 `main()` 方法由 `__main__.py` 导入并调用。它创建并返回我们的 "
"`HelloWorld` 应用程序的实例。"

#: docs/en/tutorial/tutorial-2.md:135
msgid ""
"That's the simplest possible Toga application. Let's put some of our own "
"content into the application, and make the app do something interesting."
msgstr "这是最简单可能的 Toga "
"应用程序。接下来，让我们在应用程序中加入一些我们自己的内容，使应用程序做一些"
"有趣的事情。"

#: docs/en/tutorial/tutorial-2.md:138
msgid "Adding some content of our own"
msgstr "添加一些我们自己的内容"

#: docs/en/tutorial/tutorial-2.md:140
msgid "Let's do something more interesting with our `HelloWorld` app."
msgstr "对我们的 `HelloWorld` 应用程序，做些更有意思的事吧。"

#: docs/en/tutorial/tutorial-2.md:142
#: docs/en/tutorial/tutorial-2.md:201
msgid "/// note | Note"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:144
msgid ""
"When you make these changes, make sure you keep the imports at the top of "
"the file, and the `main()` at the bottom of the file. You only need to "
"update the `HelloWorld` class."
msgstr "在做这些更改时，确保不要删除文件顶部的导入 (imports)，也不要删除底部的 "
"`main()`。您只需更新 `HelloWorld` 类。"

#: docs/en/tutorial/tutorial-2.md:150
msgid ""
"Modify your `HelloWorld` class inside `src/helloworld/app.py` so that it "
"looks like this:"
msgstr "修改 `src/helloworld/app.py` 中的 `HelloWorld` 类，使其看起来像这样:"

#: docs/en/tutorial/tutorial-2.md:185
msgid "Let's look in detail at what has changed."
msgstr "让我们详细看看有哪些变化。"

#: docs/en/tutorial/tutorial-2.md:187
msgid "We're still creating a main box; however, we are now applying a style:"
msgstr "我们仍然在创建一个主盒子；然而，现在我们正在应用一个样式:"

#: docs/en/tutorial/tutorial-2.md:193
msgid ""
"Toga's built-in layout system is called \"Pack\". It behaves a lot like CSS. "
"You define objects in a hierarchy - in HTML, the objects are `<div>`, "
"`<span>`, and other DOM elements; in Toga, they're widgets and boxes. You "
"can then assign styles to the individual elements. In this case, we're "
"indicating that this is a `COLUMN` box - that is, it is a box that will "
"consume all the available width, and will expand its height as content is "
"added, but it will try to be as short as possible."
msgstr ""
"Toga 的内置布局系统称为 \"Pack\" (包)。它的行为很像 CSS (Cascading Style "
"Sheets 层叠样式表)。你可以在一个层次结构中定义对象--在 HTML 中，对象是 "
"`<div>` (division 块级容器)、`<span>` (inline span 内联容器) 和其他 DOM ("
"Document Object Model 文档对象模型) 元素；在 Toga 中，对象是控件 (widgets ) "
"和盒子 (boxes)。然后，您可以为各个元素指定样式。在本例中，我们表示这是一个 "
"`COLUMN` (垂直) 框，也就是说，它是一个将占用所有可用宽度 (width) 的框，"
"并会随着内容的添加而扩大高度 (height)，但会尽量使高度更短。"

#: docs/en/tutorial/tutorial-2.md:203
msgid ""
"For more advanced uses, Toga also supports a separate style object, which is "
"used like this:"
msgstr "对于更高级的使用，Toga 也支持可以被这样使用的单独的样式对象:"

#: docs/en/tutorial/tutorial-2.md:213
msgid "Next, we define a couple of widgets:"
msgstr "接下来，我们定义了一些控件:"

#: docs/en/tutorial/tutorial-2.md:223
msgid ""
"Here, we define a Label and a TextInput. Both widgets have styles associated "
"with them; the label will have 5px of margin on its left and right, and no "
"margin on the top and bottom. The TextInput is marked as being flexible - "
"that is, it will absorb all available space in its layout axis."
msgstr ""
"在这里，我们定义了一个标签 (Label) 和一个文本输入框 "
"(TextInput)。这两个控件都有与其相关的样式；标签左右会各有 5px "
"的填充，上下没有填充。文本输入框是被标记为灵活的——也就是说，它将吸收其布局方"
"向上所有可用的空间。"

#: docs/en/tutorial/tutorial-2.md:229
msgid ""
"The TextInput is assigned as an instance variable of the class. This gives "
"us easy access to the widget instance - something that we'll use in a moment."
msgstr "文本输入框 (TextInput) 被分配为类的实例变量。这使我们能够轻松访问控件 "
"(widget) 实例 - 这是我们马上就会使用的东西。"

#: docs/en/tutorial/tutorial-2.md:233
msgid "Next, we define a box to hold these two widgets:"
msgstr "接下来，我们定义了一个盒子来容纳这两个控件:"

#: docs/en/tutorial/tutorial-2.md:241
msgid ""
"The `name_box` is a box just like the main box; however, this time, it's a "
"`ROW` box. That means content will be added horizontally, and it will try to "
"make its width as narrow as possible. The box also has some margin - 5px on "
"all sides."
msgstr ""
"`name_box` 就像主盒子一样；然而，这次它是一个 `ROW` (水平) "
"盒子。这意味着内容将会被水平添加，并且它会尽量使其宽度尽可能窄。盒子也有一些"
"空白填充——四周各为 5px。"

#: docs/en/tutorial/tutorial-2.md:246
msgid "Now we define a button:"
msgstr "现在，我们定义一个按钮:"

#: docs/en/tutorial/tutorial-2.md:256
msgid ""
"The button also has 5px of margin on all sides. We also define a *handler* -"
"a method to invoke when the button is pressed."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:259
msgid "Then, we add the name box and the button to the main box:"
msgstr "然后，我们将 name box 和按钮添加到主盒子中:"

#: docs/en/tutorial/tutorial-2.md:266
msgid ""
"This completes our layout; the rest of the startup method is as it was "
"previously - defining a `MainWindow`, and assigning the main box as the "
"window's content:"
msgstr "这完成了我们的布局；其余的 startup 方法与以前一样 - 定义一个 `MainWindow` "
"，并将主盒子指定为窗口的内容:"

#: docs/en/tutorial/tutorial-2.md:276
msgid ""
"The last thing we need to do is define the handler for the button. A handler "
"can be any method, generator, or asynchronous coroutine; it accepts the "
"widget that generated the event as an argument, and will be invoked whenever "
"the button is pressed:"
msgstr ""
"我们需要做的最后一件事，就是定义按钮的处理器(handler)——它可以是任何方法、生成"
"器或异步协程，且接受生成事件的控件 (widget) "
"作为参数。只要按下按钮，就会调用这些处理器:"

#: docs/en/tutorial/tutorial-2.md:286
msgid ""
"The body of the method is a simple print statement - however, it will "
"interrogate the current value of the name input, and use that content as the "
"text that is printed."
msgstr "方法的主体是一个简单的打印语句——然而，它会使用名称输入的当前值，并使用该内容"
"作为打印的文本。"

#: docs/en/tutorial/tutorial-2.md:290
msgid ""
"Now that we've made these changes we can see what they look like by starting "
"the application again. As before, we'll use developer mode:"
msgstr "现在我们已经做了这些更改，我们可以通过再次启动应用程序来看看它们的样子。和以"
"前一样，我们将使用开发者模式："

#: docs/en/tutorial/tutorial-2.md:293
#: docs/en/tutorial/tutorial-2.md:334
msgid "/// tab | macOS"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:304
#: docs/en/tutorial/tutorial-2.md:342
msgid "/// tab | Linux"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:315
#: docs/en/tutorial/tutorial-2.md:350
msgid "/// tab | Windows"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:326
msgid ""
"You'll notice that this time, it *doesn't* install dependencies. Briefcase "
"can detect that the application has been run before, and to save time, will "
"only run the application. If you add new dependencies to your app, you need "
"to make sure that they're installed by passing in a `-r` option when you run "
"`briefcase dev`."
msgstr ""
"你会注意到，这次\\ *没有*\\ 安装依赖项。Briefcase "
"可以检测到已经被运行过的应用程序 -- "
"为了节省时间，它只会运行应用程序，而不会安装依赖项。如果你在应用程序中添加了"
"新的依赖项，你可以在运行 `briefcase dev` 时通过 `-r` 选项来确保它们被安装。"

#: docs/en/tutorial/tutorial-2.md:332
msgid "This should open a GUI window:"
msgstr "这将打开一个图形用户界面 (GUI) 窗口："

#: docs/en/tutorial/tutorial-2.md:336
msgid "![Hello World Tutorial 2 window, on macOS]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:344
msgid "![Hello World Tutorial 2 window, on Linux]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:352
msgid "![Hello World Tutorial 2 window, on Windows]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:358
msgid ""
"If you enter a name in the text box, and press the GUI button, you should "
"see output appear in the console where you started the application."
msgstr "如果在文本框中输入名称，并按下图形用户界面中的按钮，就会在启动程序的控制台中"
"看到输出结果。"

#: docs/en/tutorial/tutorial-2.md:362
msgid ""
"Before continuing, close the app. As with Tutorial 1, you can do this by "
"pressing the close button on the application window, by selecting Quit/Exit "
"from the application's menu, or by typing **Ctrl+C** in the terminal where "
"you ran `briefcase dev`."
msgstr ""
"在继续之前，关闭应用程序。和教程 1 "
"一样，您可以使用应用程序窗口上的关闭按钮、从应用程序的菜单栏选择关闭/退出、"
"或在您运行 `briefcase dev` 的命令行窗口中按 **Ctrl+C** 以关闭应用程序。"

#: docs/en/tutorial/tutorial-2.md:367
msgid "Next steps"
msgstr "下一步"

#: docs/en/tutorial/tutorial-2.md:369
msgid ""
"We've now got an application that does something a little more interesting. "
"But it only runs on our own computer. Let's package this application for "
"distribution. In [Tutorial 3][tutorial-3], we'll wrap our application up as "
"a standalone installer that we could send to a friend, a customer, or upload "
"to an App Store."
msgstr ""

#~ msgid "Tutorial 2 - Making it interesting"
#~ msgstr "教程 2 - 使之更有趣"
