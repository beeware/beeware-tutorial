#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-15 23:26-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/en/tutorial/tutorial-7.md:1
msgid "Tutorial 7 - Get this (third-)party started { id=\"tutorial-7\" }"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:3
msgid ""
"So far, the app we've built has only used our own code, plus the code "
"provided by BeeWare. However, in a real-world app, you'll likely want to use "
"a third-party library, downloaded from the Python Package Index (PyPI)."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:8
msgid "Let's modify our app to include a third-party library."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:10
msgid "Adding a package"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:12
msgid ""
"Let's modify our application to say a little bit more than just "
"\"Hi, there!\"."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:15
msgid ""
"To generate some more interesting text for the dialog, we're going to use a "
"library called [Faker]{1}. Faker is a Python package that generates fake "
"content, including names and text blocks. The names and words in the text "
"block are generated from an arbitrary list of words provided by Faker. We're "
"going to use Faker to construct a fake message, as if someone is responding "
"to the user."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:23
msgid ""
"We start by adding `faker` to our app. Add an import to the top of the "
"`app.py` to import `faker`:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:30
msgid "Then modify the `say_hello()` callback so it looks like this:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:43
msgid ""
"Let's run our updated app in Briefcase developer mode to check that our "
"change has worked."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:46
#: docs/en/tutorial/tutorial-7.md:130
#: docs/en/tutorial/tutorial-7.md:201
#: docs/en/tutorial/tutorial-7.md:545
msgid "/// tab | macOS"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:66
#: docs/en/tutorial/tutorial-7.md:88
#: docs/en/tutorial/tutorial-7.md:110
#: docs/en/tutorial/tutorial-7.md:117
#: docs/en/tutorial/tutorial-7.md:124
#: docs/en/tutorial/tutorial-7.md:144
#: docs/en/tutorial/tutorial-7.md:160
#: docs/en/tutorial/tutorial-7.md:176
#: docs/en/tutorial/tutorial-7.md:183
#: docs/en/tutorial/tutorial-7.md:190
#: docs/en/tutorial/tutorial-7.md:239
#: docs/en/tutorial/tutorial-7.md:294
#: docs/en/tutorial/tutorial-7.md:334
#: docs/en/tutorial/tutorial-7.md:409
#: docs/en/tutorial/tutorial-7.md:457
#: docs/en/tutorial/tutorial-7.md:566
#: docs/en/tutorial/tutorial-7.md:595
#: docs/en/tutorial/tutorial-7.md:618
#: docs/en/tutorial/tutorial-7.md:637
#: docs/en/tutorial/tutorial-7.md:661
#: docs/en/tutorial/tutorial-7.md:672
msgid "///"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:68
#: docs/en/tutorial/tutorial-7.md:146
#: docs/en/tutorial/tutorial-7.md:241
#: docs/en/tutorial/tutorial-7.md:568
msgid "/// tab | Linux"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:90
#: docs/en/tutorial/tutorial-7.md:162
#: docs/en/tutorial/tutorial-7.md:296
#: docs/en/tutorial/tutorial-7.md:597
msgid "/// tab | Windows"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:112
#: docs/en/tutorial/tutorial-7.md:178
#: docs/en/tutorial/tutorial-7.md:336
#: docs/en/tutorial/tutorial-7.md:620
msgid "/// tab | Android"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:114
#: docs/en/tutorial/tutorial-7.md:180
msgid ""
"You can't run an Android app in developer mode - use the instructions for "
"your chosen desktop platform."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:119
#: docs/en/tutorial/tutorial-7.md:185
#: docs/en/tutorial/tutorial-7.md:411
#: docs/en/tutorial/tutorial-7.md:639
msgid "/// tab | iOS"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:121
#: docs/en/tutorial/tutorial-7.md:187
msgid ""
"You can't run an iOS app in developer mode - use the instructions for your "
"chosen desktop platform."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:126
msgid ""
"What happened? We've added `faker` to our *code*, but we haven't added it to "
"our development virtual environment. We can fix this by installing `faker` "
"with `pip`, and then re-running `briefcase dev`:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:137
#: docs/en/tutorial/tutorial-7.md:153
#: docs/en/tutorial/tutorial-7.md:169
msgid ""
"When you enter a name and press the button, you should see a dialog that "
"looks something like:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:140
msgid "![Hello World Tutorial 7 dialog, on macOS]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:156
msgid "![Hello World Tutorial 7 dialog, on Linux]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:172
msgid "![Hello World Tutorial 7 dialog, on Windows]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:192
msgid ""
"We've now got a working app, using a third party library, running in "
"development mode!"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:195
msgid "Running the updated app"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:197
msgid ""
"Let's get this updated application code packaged as a standalone app. Since "
"we've made code changes, we need to follow the same steps as in [Tutorial 4]"
"[tutorial-4]:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:203
#: docs/en/tutorial/tutorial-7.md:243
#: docs/en/tutorial/tutorial-7.md:298
#: docs/en/tutorial/tutorial-7.md:338
#: docs/en/tutorial/tutorial-7.md:413
msgid "Update the code in the packaged app:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:214
#: docs/en/tutorial/tutorial-7.md:254
#: docs/en/tutorial/tutorial-7.md:309
#: docs/en/tutorial/tutorial-7.md:349
#: docs/en/tutorial/tutorial-7.md:424
msgid "Rebuild the app:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:223
#: docs/en/tutorial/tutorial-7.md:268
#: docs/en/tutorial/tutorial-7.md:318
msgid "And finally, run the app:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:232
#: docs/en/tutorial/tutorial-7.md:327
msgid ""
"However, when the app runs, you'll see an error in the console, plus a crash "
"dialog:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:235
msgid "![Hello World Tutorial 7 app crash, on macOS]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:277
#: docs/en/tutorial/tutorial-7.md:368
msgid "However, when the app runs, you'll see an error in the console:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:330
msgid "![Hello World Tutorial 7 app crash, on Windows]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:359
#: docs/en/tutorial/tutorial-7.md:434
msgid "And finally, run the app (selecting a simulator when prompted):"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:444
msgid "However, when the app runs, you'll see an error in the console"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:459
msgid ""
"Once again, the app has failed to start because `faker` has not been "
"installed -but why? Haven't we already installed `faker`?"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:462
msgid ""
"We have - but only in the development environment. Your development "
"environment is entirely local to your machine - and is only enabled when you "
"explicitly activate it. Although Briefcase has a development mode, the main "
"reason you'd use Briefcase is to package up your code so you can give it to "
"someone else."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:468
msgid ""
"The only way to guarantee that someone else will have a Python environment "
"that contains everything it needs is to build a completely isolated Python "
"environment. This means there's a completely isolated Python install, and a "
"completely isolated set of dependencies. This is what Briefcase is building "
"when you run `briefcase build` - an isolated Python environment. This also "
"explains why `faker` isn't installed - it has been installed in your "
"*development* environment, but not in the packaged app."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:477
msgid "So - we need to tell Briefcase that our app has an external dependency."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:479
msgid "Updating dependencies"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:481
msgid ""
"In the root directory of your app, there is a file named `pyproject.toml`. "
"This file contains all the app configuration details that you provided when "
"you originally ran `briefcase new`."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:485
msgid ""
"`pyproject.toml` is broken up into sections; one of the sections describes "
"the settings for your app:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:498
msgid ""
"The `requires` option describes the dependencies of our application. It is a "
"list of strings, specifying libraries (and, optionally, versions) of "
"libraries that you want to be included with your app."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:502
msgid "Modify the `requires` setting so that it reads:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:510
msgid ""
"By adding this setting, we're telling Briefcase \"when you build my app, run "
"`pip install faker` into the application bundle\". Anything that would be "
"legal input to `pip install` can be used here - so, you could specify:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:515
msgid "A specific library version (e.g., `\"faker==37.3.0\"`);"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:516
msgid "A range of library versions (e.g., `\"faker>=37\"`);"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:517
msgid ""
"A path to a git repository (e.g., `\"git+https://github.com/joke2k/faker/\""
"`); or"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:519
msgid ""
"A local file path (However - be warned: if you give your code to someone "
"else, this path probably won't exist on their machine!)"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:522
msgid ""
"Further down in `pyproject.toml`, you'll notice other sections that are "
"operating system dependent, like `[tool.briefcase.app.helloworld.macOS]` and "
"`[tool.briefcase.app.helloworld.windows]`. These sections *also* have a "
"`requires` setting. These settings allow you to define additional platform-"
"specific dependencies - so, for example, if you need a platform-specific "
"library to handle some aspect of your app, you can specify that library in "
"the platform-specific `requires` section, and that setting will only be used "
"for that platform. You will notice that the `toga` libraries are all "
"specified in the platform-specific `requires` section - this is because the "
"libraries needed to display a user interface are platform specific."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:534
msgid ""
"In our case, we want `faker` to be installed on all platforms, so we use the "
"app-level `requires` setting. The app-level dependencies will always be "
"installed; the platform-specific dependencies are installed *in addition* to "
"the app-level ones."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:539
msgid ""
"Now that we've told Briefcase about our additional requirements, we can try "
"packaging our app again. Ensure that you've saved your changes to "
"`pyproject.toml`, and then update your app again - this time, passing in the "
"`-r` flag. This tells Briefcase to update requirements in the packaged app:"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:663
msgid ""
"Once you've updated, you can run `briefcase build` and `briefcase run` - and "
"you should see your packaged app, with the new dialog behavior."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:666
msgid "/// note | Note"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:668
msgid ""
"The `-r` option for updating requirements is also honored by the `build` and "
"`run` command, so if you want to update, build, and run in one step, you "
"could use `briefcase run -u -r`."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:674
msgid "Third-Party Python Packages for Mobile and Web"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:676
msgid ""
"Faker is just one example of a third-party Python package - a collection of "
"code that isn't part what Python provides out of the box. These third-party "
"packages are most commonly distributed using the "
"[Python Package Index (PyPI)]{1}, and installed into your local virtual "
"environment. We've been using `pip` in this tutorial, but there are other "
"options."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:683
msgid ""
"On desktop platforms (macOS, Windows, Linux), essentially any package on "
"PyPI package can be installed into your virtual environment, or added to "
"your app's requirements. However, when building an app for mobile or web "
"platforms, [your options are slightly limited]{1}."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:689
msgid ""
"In short; any *pure Python* package (i.e. any package created from a project "
"written *only* in Python) can be used without difficulty. Some packages, "
"though, are created from projects that contain both Python and other "
"languages (e.g. C, C++, Rust, etc). Code written in those languages needs to "
"be compiled to platform-specific binary modules before it can be used, and "
"those pre-compiled binary modules are only available on specific platforms. "
"Mobile and web platforms have very different requirements than \"standard\" "
"desktop platforms. At this time, most Python packages don't provide pre-"
"compiled binaries for mobile and web platforms."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:700
msgid ""
"On PyPI, packages are often provided in a pre-built distribution format "
"called *wheels*. To check whether a package is pure Python, look at the PyPI "
"downloads page for the project. If the wheels provided have a `-py3-none-"
"any.whl` suffix (e.g., [Faker]{1}), then they are pure Python wheels. "
"However, if the wheels have version and platform-specific extensions (e.g., "
"[Pillow]{2}, which has wheels with suffixes like "
"`-cp313-cp313-macosx_11_0_arm64.whl` and `-cp39-cp39-win_amd64.whl`), then "
"the wheel *contains a binary component*. That package cannot be installed on "
"mobile or web platforms unless a wheel compatible with those platforms has "
"been provided."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:713
msgid ""
"At this time, *most* binary packages on PyPI don't provide mobile- or web-"
"compatible wheels. To fill this gap, BeeWare provides binaries for some "
"popular binary modules (including `numpy`, `pandas`, and `cryptography`). "
"These wheels are *not* distributed on PyPI, but Briefcase will install those "
"wheels if they're available."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:719
msgid ""
"It's *usually* possible to compile binary packages for mobile platforms, but "
"it's not easy to set up -- well outside the scope of an introductory "
"tutorial like this one."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:723
msgid "Next steps"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:725
msgid ""
"We've now got an app that uses a third-party library! In [Tutorial 8]"
"[tutorial-8] we'll learn how to ensure our app remains responsive as we add "
"more complex application logic."
msgstr ""
