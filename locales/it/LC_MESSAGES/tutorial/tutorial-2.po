msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-15 23:26-0400\n"
"PO-Revision-Date: 2024-02-13 12:11+0800\n"
"Last-Translator: Russell Keith-Magee <russell@keith-magee.com>\n"
"Language-Team: it <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/en/tutorial/tutorial-2.md:1
msgid "Tutorial 2 - Making it interesting { id=\"tutorial-2\" }"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:3
#, fuzzy
msgid ""
"In [Tutorial 1][tutorial-1], we generated a stub project that was able to "
"run, but we didn't write any code ourselves. Let's take a look at what was "
"generated for us."
msgstr ""
"In [Tutorial 1][tutorial-1], abbiamo generato un progetto stub in grado di "
"funzionare, ma non abbiamo scritto alcun codice. Diamo un'occhiata a ciò che "
"è stato generato per noi."

#: docs/en/tutorial/tutorial-2.md:7
#, fuzzy
msgid "What was generated"
msgstr "Cosa è stato generato"

#: docs/en/tutorial/tutorial-2.md:9
#, fuzzy
msgid ""
"In the `src/helloworld` directory, you should see 3 files: `__init__.py`, "
"`__main__.py` and `app.py`."
msgstr ""
"Nella cartella `src/helloworld`, si dovrebbero vedere 3 file: `__init__.py`, "
"`__main__.py` e `app.py`."

#: docs/en/tutorial/tutorial-2.md:12
#, fuzzy
msgid ""
"`__init__.py` marks the `helloworld` directory as an importable Python "
"module. It is an empty file; the very fact it exists tells the Python "
"interpreter that the `helloworld` directory defines a module."
msgstr ""
"`__init__.py` segna la cartella `helloworld` come un modulo Python "
"importabile. È un file vuoto; il solo fatto che esista indica all'interprete "
"Python che la cartella `helloworld` definisce un modulo."

#: docs/en/tutorial/tutorial-2.md:16
msgid ""
"`__main__.py` marks the `helloworld` module as a special kind of module -an "
"executable module. If you try to run the `helloworld` module using `python -"
"m helloworld`, the `__main__.py` file is where Python will start executing. "
"The contents of `__main__.py` is relatively simple:"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:28
msgid "This file does two things:"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:30
msgid "It imports the `main` method from the `helloworld` app."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:31
#, fuzzy
msgid ""
"Then, it starts the application’s main loop. The main loop is the way a GUI "
"application listens for user input (like mouse clicks and keyboard presses)."
msgstr ""
"Cioè, importa il metodo `main` dall'applicazione `helloworld` e, se viene "
"eseguito come punto di ingresso, chiama il metodo main() e avvia il ciclo "
"principale dell'applicazione. Il ciclo principale è il modo in cui "
"un'applicazione GUI ascolta gli input dell'utente (come i clic del mouse e "
"la pressione della tastiera)."

#: docs/en/tutorial/tutorial-2.md:35
#, fuzzy
msgid ""
"The more interesting file is `app.py` - this contains the logic that creates "
"our application window:"
msgstr ""
"Il file più interessante è `app.py`: contiene la logica che crea la finestra "
"della nostra applicazione:"

#: docs/en/tutorial/tutorial-2.md:54
#, fuzzy
msgid "Let's go through this line by line:"
msgstr "Esaminiamo questa riga per riga:"

#: docs/en/tutorial/tutorial-2.md:61
#, fuzzy
msgid ""
"First, we import the `toga` widget toolkit, as well as some style-related "
"utility constants. Our code doesn't use these yet - but we'll make use of "
"them shortly."
msgstr ""
"Per prima cosa, importiamo il toolkit di widget `toga` e alcune classi e "
"costanti di utilità legate allo stile. Il nostro codice non le usa ancora, "
"ma le useremo a breve."

#: docs/en/tutorial/tutorial-2.md:65
#, fuzzy
msgid "Then, we define a class:"
msgstr "Quindi, definiamo una classe:"

#: docs/en/tutorial/tutorial-2.md:71
#, fuzzy
msgid ""
"Each Toga application has a single `toga.App` instance, representing the "
"running entity that is the application. The app may end up managing multiple "
"windows; but for simple applications, there will be a single main window."
msgstr ""
"Ogni applicazione Toga ha una singola istanza `toga.App`, che rappresenta "
"l'entità in esecuzione che è l'applicazione. L'applicazione può finire per "
"gestire più finestre, ma per le applicazioni semplici ci sarà una sola "
"finestra principale."

#: docs/en/tutorial/tutorial-2.md:76
#, fuzzy
msgid "Next, we define a `startup()` method:"
msgstr "Quindi, definiamo un metodo `startup()`:"

#: docs/en/tutorial/tutorial-2.md:83
#, fuzzy
msgid ""
"The first thing the startup method does is to define a main box. Toga's "
"layout scheme behaves similar to HTML. You build an application by "
"constructing a collection of boxes, each of which contains other boxes, or "
"actual widgets. You then apply styles to these boxes to define how they will "
"consume the available window space."
msgstr ""
"La prima cosa che il metodo di avvio fa è definire un riquadro principale. "
"Lo schema di layout di Toga si comporta in modo simile all'HTML. Si "
"costruisce un'applicazione costruendo un insieme di riquadri, ognuno dei "
"quali contiene altri riquadri, o widget veri e propri. Si applicano poi "
"degli stili a questi riquadri per definire il modo in cui consumeranno lo "
"spazio disponibile della finestra."

#: docs/en/tutorial/tutorial-2.md:89
#, fuzzy
msgid ""
"In this application, we define a single box, but we don't put anything into "
"it."
msgstr ""
"In questa applicazione, definiamo una singola casella, ma non inseriamo "
"nulla al suo interno."

#: docs/en/tutorial/tutorial-2.md:92
#, fuzzy
msgid "Next, we define a window into which we can put this empty box:"
msgstr "Quindi, definiamo una finestra in cui inserire questa casella vuota:"

#: docs/en/tutorial/tutorial-2.md:98
#, fuzzy
msgid ""
"This creates an instance of a `toga.MainWindow`, which will have a title "
"matching the application's name. A Main Window is a special kind of window "
"in Toga - it's a window that is closely bound to the life cycle of the app. "
"When the Main Window is closed, the application exits. The Main Window is "
"also the window that has the application's menu (if you're on a platform "
"like Windows where menu bars are part of the window)."
msgstr ""
"Questo crea un'istanza di `toga.MainWindow`, che avrà un titolo "
"corrispondente al nome dell'applicazione. Una finestra principale è un tipo "
"speciale di finestra in Toga: è una finestra strettamente legata al ciclo di "
"vita dell'applicazione. Quando la finestra principale viene chiusa, "
"l'applicazione esce. La finestra principale è anche la finestra che contiene "
"il menu dell'applicazione (se si utilizza una piattaforma come Windows in "
"cui le barre dei menu fanno parte della finestra)"

#: docs/en/tutorial/tutorial-2.md:106
msgid "/// admonition | Where is my window?"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:108
msgid ""
"If you have made an error in your code, the main window of the app may not "
"display. If this happens, you can type **Ctrl+C** in the terminal where you "
"started the app. This will stop the app. You can then fix the error and "
"restart the app."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:113
#: docs/en/tutorial/tutorial-2.md:148
#: docs/en/tutorial/tutorial-2.md:211
#: docs/en/tutorial/tutorial-2.md:302
#: docs/en/tutorial/tutorial-2.md:313
#: docs/en/tutorial/tutorial-2.md:324
#: docs/en/tutorial/tutorial-2.md:340
#: docs/en/tutorial/tutorial-2.md:348
#: docs/en/tutorial/tutorial-2.md:356
msgid "///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:115
#, fuzzy
msgid ""
"We then add our empty box as the content of the main window, and instruct "
"the application to show our window:"
msgstr ""
"Aggiungiamo quindi la nostra casella vuota come contenuto della finestra "
"principale e istruiamo l'applicazione a mostrare la nostra finestra:"

#: docs/en/tutorial/tutorial-2.md:123
#, fuzzy
msgid ""
"Last of all, we define a `main()` function. This is what creates the "
"instance of our application:"
msgstr ""
"Infine, definiamo un metodo `main()`. Questo è ciò che crea l'istanza della "
"nostra applicazione:"

#: docs/en/tutorial/tutorial-2.md:131
#, fuzzy
msgid ""
"This `main()` method is the one that is imported and invoked by `__main__.py`"
". It creates and returns an instance of our `HelloWorld` application."
msgstr ""
"Questo metodo `main()` è quello che viene importato e invocato da "
"`__main__.py`. Crea e restituisce un'istanza della nostra applicazione "
"`HelloWorld`."

#: docs/en/tutorial/tutorial-2.md:135
#, fuzzy
msgid ""
"That's the simplest possible Toga application. Let's put some of our own "
"content into the application, and make the app do something interesting."
msgstr ""
"Questa è l'applicazione Toga più semplice possibile. Inseriamo "
"nell'applicazione alcuni contenuti personali e facciamo in modo che "
"l'applicazione faccia qualcosa di interessante."

#: docs/en/tutorial/tutorial-2.md:138
#, fuzzy
msgid "Adding some content of our own"
msgstr "Aggiunta di contenuti propri"

#: docs/en/tutorial/tutorial-2.md:140
msgid "Let's do something more interesting with our `HelloWorld` app."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:142
#: docs/en/tutorial/tutorial-2.md:201
msgid "/// note | Note"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:144
#, fuzzy
msgid ""
"When you make these changes, make sure you keep the imports at the top of "
"the file, and the `main()` at the bottom of the file. You only need to "
"update the `HelloWorld` class."
msgstr ""
"Non rimuovete le importazioni all'inizio del file o il `main()` in fondo. È "
"necessario aggiornare solo la classe `HelloWorld`."

#: docs/en/tutorial/tutorial-2.md:150
#, fuzzy
msgid ""
"Modify your `HelloWorld` class inside `src/helloworld/app.py` so that it "
"looks like this:"
msgstr ""
"Modificate la classe `HelloWorld` all'interno di `src/helloworld/app.py` in "
"modo che abbia questo aspetto:"

#: docs/en/tutorial/tutorial-2.md:185
#, fuzzy
msgid "Let's look in detail at what has changed."
msgstr "Vediamo nel dettaglio cosa è cambiato."

#: docs/en/tutorial/tutorial-2.md:187
#, fuzzy
msgid "We're still creating a main box; however, we are now applying a style:"
msgstr ""
"Stiamo ancora creando un riquadro principale, ma ora stiamo applicando uno "
"stile:"

#: docs/en/tutorial/tutorial-2.md:193
#, fuzzy
msgid ""
"Toga's built-in layout system is called \"Pack\". It behaves a lot like CSS. "
"You define objects in a hierarchy - in HTML, the objects are `<div>`, "
"`<span>`, and other DOM elements; in Toga, they're widgets and boxes. You "
"can then assign styles to the individual elements. In this case, we're "
"indicating that this is a `COLUMN` box - that is, it is a box that will "
"consume all the available width, and will expand its height as content is "
"added, but it will try to be as short as possible."
msgstr ""
"Il sistema di layout integrato di Toga si chiama \"Pack\". Si comporta in "
"modo molto simile ai CSS. Si definiscono gli oggetti in una gerarchia: in "
"HTML, gli oggetti sono `<div>`, `<span>` e altri elementi DOM; in Toga, sono "
"widget e box. Si possono poi assegnare stili ai singoli elementi. In questo "
"caso, stiamo indicando che si tratta di un riquadro `COLUMN`, cioè un "
"riquadro che consumerà tutta la larghezza disponibile e si espanderà in "
"altezza man mano che si aggiungono contenuti, ma cercherà di essere il più "
"corto possibile."

#: docs/en/tutorial/tutorial-2.md:203
msgid ""
"For more advanced uses, Toga also supports a separate style object, which is "
"used like this:"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:213
#, fuzzy
msgid "Next, we define a couple of widgets:"
msgstr "Successivamente, definiamo un paio di widget:"

#: docs/en/tutorial/tutorial-2.md:223
#, fuzzy
msgid ""
"Here, we define a Label and a TextInput. Both widgets have styles associated "
"with them; the label will have 5px of margin on its left and right, and no "
"margin on the top and bottom. The TextInput is marked as being flexible - "
"that is, it will absorb all available space in its layout axis."
msgstr ""
"Qui definiamo una Label e un TextInput. A entrambi i widget sono associati "
"degli stili; l'etichetta avrà un padding di 5px a sinistra e a destra e "
"nessun padding in alto e in basso. Il TextInput è contrassegnato come "
"flessibile, cioè assorbirà tutto lo spazio disponibile nel suo asse di "
"layout."

#: docs/en/tutorial/tutorial-2.md:229
#, fuzzy
msgid ""
"The TextInput is assigned as an instance variable of the class. This gives "
"us easy access to the widget instance - something that we'll use in a moment."
msgstr ""
"Il TextInput è assegnato come variabile di istanza della classe. Questo ci "
"consente di accedere facilmente all'istanza del widget, che utilizzeremo tra "
"poco."

#: docs/en/tutorial/tutorial-2.md:233
#, fuzzy
msgid "Next, we define a box to hold these two widgets:"
msgstr "Quindi, definiamo un riquadro per contenere questi due widget:"

#: docs/en/tutorial/tutorial-2.md:241
#, fuzzy
msgid ""
"The `name_box` is a box just like the main box; however, this time, it's a "
"`ROW` box. That means content will be added horizontally, and it will try to "
"make its width as narrow as possible. The box also has some margin - 5px on "
"all sides."
msgstr ""
"Il `nome_box` è un box come quello principale, ma questa volta è un box `ROW`"
". Ciò significa che il contenuto sarà aggiunto orizzontalmente e cercherà di "
"avere una larghezza il più possibile ridotta. Il riquadro ha anche un "
"padding di 5px su tutti i lati."

#: docs/en/tutorial/tutorial-2.md:246
#, fuzzy
msgid "Now we define a button:"
msgstr "Ora definiamo un pulsante:"

#: docs/en/tutorial/tutorial-2.md:256
msgid ""
"The button also has 5px of margin on all sides. We also define a *handler* -"
"a method to invoke when the button is pressed."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:259
#, fuzzy
msgid "Then, we add the name box and the button to the main box:"
msgstr ""
"Quindi, aggiungiamo la casella del nome e il pulsante alla casella "
"principale:"

#: docs/en/tutorial/tutorial-2.md:266
#, fuzzy
msgid ""
"This completes our layout; the rest of the startup method is as it was "
"previously - defining a `MainWindow`, and assigning the main box as the "
"window's content:"
msgstr ""
"Questo completa il nostro layout; il resto del metodo di avvio è come in "
"precedenza: definire una MainWindow e assegnare il riquadro principale come "
"contenuto della finestra:"

#: docs/en/tutorial/tutorial-2.md:276
#, fuzzy
msgid ""
"The last thing we need to do is define the handler for the button. A handler "
"can be any method, generator, or asynchronous coroutine; it accepts the "
"widget that generated the event as an argument, and will be invoked whenever "
"the button is pressed:"
msgstr ""
"L'ultima cosa da fare è definire il gestore del pulsante. Un gestore può "
"essere qualsiasi metodo, generatore o co-routine asincrona; accetta come "
"argomento il widget che ha generato l'evento e sarà invocato ogni volta che "
"il pulsante viene premuto:"

#: docs/en/tutorial/tutorial-2.md:286
#, fuzzy
msgid ""
"The body of the method is a simple print statement - however, it will "
"interrogate the current value of the name input, and use that content as the "
"text that is printed."
msgstr ""
"Il corpo del metodo è una semplice istruzione di stampa, che però interroga "
"il valore corrente dell'input name e utilizza il suo contenuto come testo "
"stampato."

#: docs/en/tutorial/tutorial-2.md:290
#, fuzzy
msgid ""
"Now that we've made these changes we can see what they look like by starting "
"the application again. As before, we'll use developer mode:"
msgstr ""
"Ora che abbiamo apportato queste modifiche, possiamo vederne l'aspetto "
"avviando nuovamente l'applicazione. Come prima, useremo la modalità "
"sviluppatore:"

#: docs/en/tutorial/tutorial-2.md:293
#: docs/en/tutorial/tutorial-2.md:334
msgid "/// tab | macOS"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:304
#: docs/en/tutorial/tutorial-2.md:342
msgid "/// tab | Linux"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:315
#: docs/en/tutorial/tutorial-2.md:350
msgid "/// tab | Windows"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:326
#, fuzzy
msgid ""
"You'll notice that this time, it *doesn't* install dependencies. Briefcase "
"can detect that the application has been run before, and to save time, will "
"only run the application. If you add new dependencies to your app, you need "
"to make sure that they're installed by passing in a `-r` option when you run "
"`briefcase dev`."
msgstr ""
"Si noterà che questa volta *non* installa le dipendenze. Briefcase è in "
"grado di rilevare che l'applicazione è già stata eseguita in precedenza e, "
"per risparmiare tempo, eseguirà solo l'applicazione. Se si aggiungono nuove "
"dipendenze alla propria applicazione, ci si può assicurare che vengano "
"installate passando l'opzione `-r` quando si esegue `briefcase dev``."

#: docs/en/tutorial/tutorial-2.md:332
#, fuzzy
msgid "This should open a GUI window:"
msgstr "Si dovrebbe aprire una finestra dell'interfaccia grafica:"

#: docs/en/tutorial/tutorial-2.md:336
msgid "![Hello World Tutorial 2 window, on macOS]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:344
msgid "![Hello World Tutorial 2 window, on Linux]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:352
msgid "![Hello World Tutorial 2 window, on Windows]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:358
#, fuzzy
msgid ""
"If you enter a name in the text box, and press the GUI button, you should "
"see output appear in the console where you started the application."
msgstr ""
"Se si inserisce un nome nella casella di testo e si preme il pulsante GUI, "
"si dovrebbe vedere l'output nella console in cui è stata avviata "
"l'applicazione."

#: docs/en/tutorial/tutorial-2.md:362
msgid ""
"Before continuing, close the app. As with Tutorial 1, you can do this by "
"pressing the close button on the application window, by selecting Quit/Exit "
"from the application's menu, or by typing **Ctrl+C** in the terminal where "
"you ran `briefcase dev`."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:367
msgid "Next steps"
msgstr "Prossimi passi"

#: docs/en/tutorial/tutorial-2.md:369
#, fuzzy
msgid ""
"We've now got an application that does something a little more interesting. "
"But it only runs on our own computer. Let's package this application for "
"distribution. In [Tutorial 3][tutorial-3], we'll wrap our application up as "
"a standalone installer that we could send to a friend, a customer, or upload "
"to an App Store."
msgstr ""
"Ora abbiamo un'applicazione che fa qualcosa di più interessante. Ma funziona "
"solo sul nostro computer. Impacchettiamo questa applicazione per la "
"distribuzione. In [Tutorial 3][tutorial-3], impacchetteremo la nostra "
"applicazione come un programma di installazione autonomo da inviare a un "
"amico, a un cliente o da caricare su un App Store."

#, fuzzy
#~ msgid "Tutorial 2 - Making it interesting"
#~ msgstr "Esercitazione 2 - Rendere interessante"
