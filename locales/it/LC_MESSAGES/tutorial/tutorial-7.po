msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-14 23:09-0400\n"
"PO-Revision-Date: 2024-02-13 12:13+0800\n"
"Last-Translator: Russell Keith-Magee <russell@keith-magee.com>\n"
"Language-Team: it <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/en/tutorial/tutorial-7.md:1
msgid "Tutorial 7 - Get this (third-)party started { id=\"tutorial-7\" }"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:3
#, fuzzy
msgid ""
"So far, the app we've built has only used our own code, plus the code "
"provided by BeeWare. However, in a real-world app, you'll likely want to use "
"a third-party library, downloaded from the Python Package Index (PyPI)."
msgstr ""
"Finora, l'applicazione che abbiamo costruito ha utilizzato solo il nostro "
"codice e quello fornito da BeeWare. Tuttavia, in un'applicazione reale, è "
"probabile che si voglia utilizzare una libreria di terze parti, scaricata "
"dal Python Package Index (PyPI)."

#: docs/en/tutorial/tutorial-7.md:8
#, fuzzy
msgid "Let's modify our app to include a third-party library."
msgstr ""
"Modifichiamo la nostra applicazione per includere una libreria di terze "
"parti."

#: docs/en/tutorial/tutorial-7.md:10
msgid "Adding a package"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:12
msgid ""
"Let's modify our application to say a little bit more than just "
"\"Hi, there!\"."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:15
msgid ""
"To generate some more interesting text for the dialog, we're going to use a "
"library called [Faker]{1}. Faker is a Python package that generates fake "
"content, including names and text blocks. The names and words in the text "
"block are generated from an arbitrary list of words provided by Faker. We're "
"going to use Faker to construct a fake message, as if someone is responding "
"to the user."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:23
#, fuzzy
msgid ""
"We start by adding `faker` to our app. Add an import to the top of the "
"`app.py` to import `faker`:"
msgstr ""
"Aggiungiamo una chiamata API `httpx` alla nostra applicazione. Aggiungiamo "
"un'importazione all'inizio di `app.py` per importare `httpx`:"

#: docs/en/tutorial/tutorial-7.md:30
#, fuzzy
msgid "Then modify the `say_hello()` callback so it looks like this:"
msgstr ""
"Modificare quindi il callback `say_hello()` in modo che assomigli a questo:"

#: docs/en/tutorial/tutorial-7.md:43
#, fuzzy
msgid ""
"Let's run our updated app in Briefcase developer mode to check that our "
"change has worked."
msgstr ""
"Eseguiamo la nostra applicazione aggiornata in modalità sviluppatore di "
"Briefcase per verificare che la nostra modifica abbia funzionato."

#: docs/en/tutorial/tutorial-7.md:46
#: docs/en/tutorial/tutorial-7.md:130
#: docs/en/tutorial/tutorial-7.md:201
#: docs/en/tutorial/tutorial-7.md:545
msgid "/// tab | macOS"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:66
#: docs/en/tutorial/tutorial-7.md:88
#: docs/en/tutorial/tutorial-7.md:110
#: docs/en/tutorial/tutorial-7.md:117
#: docs/en/tutorial/tutorial-7.md:124
#: docs/en/tutorial/tutorial-7.md:144
#: docs/en/tutorial/tutorial-7.md:160
#: docs/en/tutorial/tutorial-7.md:176
#: docs/en/tutorial/tutorial-7.md:183
#: docs/en/tutorial/tutorial-7.md:190
#: docs/en/tutorial/tutorial-7.md:239
#: docs/en/tutorial/tutorial-7.md:294
#: docs/en/tutorial/tutorial-7.md:334
#: docs/en/tutorial/tutorial-7.md:409
#: docs/en/tutorial/tutorial-7.md:457
#: docs/en/tutorial/tutorial-7.md:566
#: docs/en/tutorial/tutorial-7.md:595
#: docs/en/tutorial/tutorial-7.md:618
#: docs/en/tutorial/tutorial-7.md:637
#: docs/en/tutorial/tutorial-7.md:661
#: docs/en/tutorial/tutorial-7.md:672
msgid "///"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:68
#: docs/en/tutorial/tutorial-7.md:146
#: docs/en/tutorial/tutorial-7.md:241
#: docs/en/tutorial/tutorial-7.md:568
msgid "/// tab | Linux"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:90
#: docs/en/tutorial/tutorial-7.md:162
#: docs/en/tutorial/tutorial-7.md:296
#: docs/en/tutorial/tutorial-7.md:597
msgid "/// tab | Windows"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:112
#: docs/en/tutorial/tutorial-7.md:178
#: docs/en/tutorial/tutorial-7.md:336
#: docs/en/tutorial/tutorial-7.md:620
msgid "/// tab | Android"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:114
#: docs/en/tutorial/tutorial-7.md:180
msgid ""
"You can't run an Android app in developer mode - use the instructions for "
"your chosen desktop platform."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:119
#: docs/en/tutorial/tutorial-7.md:185
#: docs/en/tutorial/tutorial-7.md:411
#: docs/en/tutorial/tutorial-7.md:639
msgid "/// tab | iOS"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:121
#: docs/en/tutorial/tutorial-7.md:187
msgid ""
"You can't run an iOS app in developer mode - use the instructions for your "
"chosen desktop platform."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:126
#, fuzzy
msgid ""
"What happened? We've added `faker` to our *code*, but we haven't added it to "
"our development virtual environment. We can fix this by installing `faker` "
"with `pip`, and then re-running `briefcase dev`:"
msgstr ""
"Cosa è successo? Abbiamo aggiunto `httpx` al nostro *codice*, ma non "
"l'abbiamo aggiunto al nostro ambiente virtuale di sviluppo. Possiamo "
"risolvere il problema installando `httpx` con `pip` e poi eseguendo "
"nuovamente `briefcase dev``:"

#: docs/en/tutorial/tutorial-7.md:137
#: docs/en/tutorial/tutorial-7.md:153
#: docs/en/tutorial/tutorial-7.md:169
#, fuzzy
msgid ""
"When you enter a name and press the button, you should see a dialog that "
"looks something like:"
msgstr ""
"Quando si inserisce un nome e si preme il pulsante, dovrebbe apparire una "
"finestra di dialogo simile a questa:"

#: docs/en/tutorial/tutorial-7.md:192
#, fuzzy
msgid ""
"We've now got a working app, using a third party library, running in "
"development mode!"
msgstr ""
"Ora abbiamo un'applicazione funzionante, che utilizza una libreria di terze "
"parti, in modalità di sviluppo!"

#: docs/en/tutorial/tutorial-7.md:195
#, fuzzy
msgid "Running the updated app"
msgstr "Esecuzione dell'applicazione aggiornata"

#: docs/en/tutorial/tutorial-7.md:197
#, fuzzy
msgid ""
"Let's get this updated application code packaged as a standalone app. Since "
"we've made code changes, we need to follow the same steps as in [Tutorial 4]"
"[tutorial-4]:"
msgstr ""
"Facciamo in modo che il codice aggiornato dell'applicazione venga "
"confezionato come applicazione autonoma. Poiché abbiamo apportato modifiche "
"al codice, dobbiamo seguire gli stessi passi di [Tutorial 4][tutorial-4]:"

#: docs/en/tutorial/tutorial-7.md:203
#: docs/en/tutorial/tutorial-7.md:243
#: docs/en/tutorial/tutorial-7.md:298
#: docs/en/tutorial/tutorial-7.md:338
#: docs/en/tutorial/tutorial-7.md:413
#, fuzzy
msgid "Update the code in the packaged app:"
msgstr "Aggiornare il codice dell'applicazione confezionata:"

#: docs/en/tutorial/tutorial-7.md:214
#: docs/en/tutorial/tutorial-7.md:254
#: docs/en/tutorial/tutorial-7.md:309
#: docs/en/tutorial/tutorial-7.md:349
#: docs/en/tutorial/tutorial-7.md:424
#, fuzzy
msgid "Rebuild the app:"
msgstr "Ricostruire l'applicazione:"

#: docs/en/tutorial/tutorial-7.md:223
#: docs/en/tutorial/tutorial-7.md:268
#: docs/en/tutorial/tutorial-7.md:318
#, fuzzy
msgid "And finally, run the app:"
msgstr "Infine, eseguire l'applicazione:"

#: docs/en/tutorial/tutorial-7.md:232
#: docs/en/tutorial/tutorial-7.md:327
#, fuzzy
msgid ""
"However, when the app runs, you'll see an error in the console, plus a crash "
"dialog:"
msgstr ""
"Tuttavia, quando l'applicazione viene eseguita, viene visualizzato un errore "
"nella console e una finestra di dialogo di arresto anomalo:"

#: docs/en/tutorial/tutorial-7.md:277
#: docs/en/tutorial/tutorial-7.md:368
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console:"
msgstr ""
"Tuttavia, quando l'applicazione viene eseguita, viene visualizzato un errore "
"nella console:"

#: docs/en/tutorial/tutorial-7.md:359
#: docs/en/tutorial/tutorial-7.md:434
msgid "And finally, run the app (selecting a simulator when prompted):"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:444
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console"
msgstr ""
"Tuttavia, quando l'applicazione viene eseguita, viene visualizzato un errore "
"nella console:"

#: docs/en/tutorial/tutorial-7.md:459
msgid ""
"Once again, the app has failed to start because `faker` has not been "
"installed -but why? Haven't we already installed `faker`?"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:462
#, fuzzy
msgid ""
"We have - but only in the development environment. Your development "
"environment is entirely local to your machine - and is only enabled when you "
"explicitly activate it. Although Briefcase has a development mode, the main "
"reason you'd use Briefcase is to package up your code so you can give it to "
"someone else."
msgstr ""
"È così, ma solo nell'ambiente di sviluppo. L'ambiente di sviluppo è "
"interamente locale alla vostra macchina e viene attivato solo quando lo "
"attivate esplicitamente. Anche se Briefcase ha una modalità di sviluppo, il "
"motivo principale per cui si usa Briefcase è per impacchettare il codice in "
"modo da poterlo dare a qualcun altro."

#: docs/en/tutorial/tutorial-7.md:468
#, fuzzy
msgid ""
"The only way to guarantee that someone else will have a Python environment "
"that contains everything it needs is to build a completely isolated Python "
"environment. This means there's a completely isolated Python install, and a "
"completely isolated set of dependencies. This is what Briefcase is building "
"when you run `briefcase build` - an isolated Python environment. This also "
"explains why `faker` isn't installed - it has been installed in your "
"*development* environment, but not in the packaged app."
msgstr ""
"L'unico modo per garantire che qualcun altro abbia un ambiente Python che "
"contiene tutto ciò di cui ha bisogno è costruire un ambiente Python "
"completamente isolato. Questo significa che c'è un'installazione di Python "
"completamente isolata e un insieme di dipendenze completamente isolato. "
"Questo è ciò che Briefcase costruisce quando si lancia `briefcase build` - "
"un ambiente Python isolato. Questo spiega anche perché `httpx` non è "
"installato: è stato installato nell'ambiente di *sviluppo*, ma non "
"nell'applicazione confezionata."

#: docs/en/tutorial/tutorial-7.md:477
#, fuzzy
msgid "So - we need to tell Briefcase that our app has an external dependency."
msgstr ""
"Quindi, dobbiamo dire a Briefcase che la nostra applicazione ha una "
"dipendenza esterna."

#: docs/en/tutorial/tutorial-7.md:479
#, fuzzy
msgid "Updating dependencies"
msgstr "Aggiornamento delle dipendenze"

#: docs/en/tutorial/tutorial-7.md:481
#, fuzzy
msgid ""
"In the root directory of your app, there is a file named `pyproject.toml`. "
"This file contains all the app configuration details that you provided when "
"you originally ran `briefcase new`."
msgstr ""
"Nella directory principale dell'applicazione, c'è un file chiamato "
"`pyproject.toml`. Questo file contiene tutti i dettagli di configurazione "
"dell'applicazione forniti al momento dell'esecuzione di `briefcase new`."

#: docs/en/tutorial/tutorial-7.md:485
#, fuzzy
msgid ""
"`pyproject.toml` is broken up into sections; one of the sections describes "
"the settings for your app:"
msgstr ""
"il file `pyproject.toml` è suddiviso in sezioni; una delle sezioni descrive "
"le impostazioni per l'applicazione:"

#: docs/en/tutorial/tutorial-7.md:498
#, fuzzy
msgid ""
"The `requires` option describes the dependencies of our application. It is a "
"list of strings, specifying libraries (and, optionally, versions) of "
"libraries that you want to be included with your app."
msgstr ""
"L'opzione `requires` descrive le dipendenze della nostra applicazione. Si "
"tratta di un elenco di stringhe, che specificano le librerie (e, "
"opzionalmente, le versioni) delle librerie che si vogliono includere nella "
"propria applicazione."

#: docs/en/tutorial/tutorial-7.md:502
#, fuzzy
msgid "Modify the `requires` setting so that it reads:"
msgstr "Modificare l'impostazione `requires` in modo che si legga:"

#: docs/en/tutorial/tutorial-7.md:510
#, fuzzy
msgid ""
"By adding this setting, we're telling Briefcase \"when you build my app, run "
"`pip install faker` into the application bundle\". Anything that would be "
"legal input to `pip install` can be used here - so, you could specify:"
msgstr ""
"Aggiungendo questa impostazione, si dice a Briefcase \"quando costruisci la "
"mia applicazione, esegui `pip install httpx` nel bundle dell'applicazione\". "
"Qualsiasi cosa che sia un input legale per `pip install` può essere usato "
"qui, quindi si può specificare:"

#: docs/en/tutorial/tutorial-7.md:515
#, fuzzy
msgid "A specific library version (e.g., `\"faker==37.3.0\"`);"
msgstr ""
"Una versione specifica della libreria (ad esempio, `\"httpx==0.19.0\"`);"

#: docs/en/tutorial/tutorial-7.md:516
#, fuzzy
msgid "A range of library versions (e.g., `\"faker>=37\"`);"
msgstr ""
"Un intervallo di versioni della libreria (ad esempio, `\"httpx>=0.19\"`);"

#: docs/en/tutorial/tutorial-7.md:517
#, fuzzy
msgid ""
"A path to a git repository (e.g., `\"git+https://github.com/joke2k/faker/\""
"`); or"
msgstr ""
"Un percorso a un repository git (ad esempio, `git+https://github.com/encode/"
"httpx\"`); oppure"

#: docs/en/tutorial/tutorial-7.md:519
#, fuzzy
msgid ""
"A local file path (However - be warned: if you give your code to someone "
"else, this path probably won't exist on their machine!)"
msgstr ""
"Un percorso di file locale (tuttavia, attenzione: se si dà il codice a "
"qualcun altro, questo percorso probabilmente non esisterà sulla sua macchina)"

#: docs/en/tutorial/tutorial-7.md:522
#, fuzzy
msgid ""
"Further down in `pyproject.toml`, you'll notice other sections that are "
"operating system dependent, like `[tool.briefcase.app.helloworld.macOS]` and "
"`[tool.briefcase.app.helloworld.windows]`. These sections *also* have a "
"`requires` setting. These settings allow you to define additional platform-"
"specific dependencies - so, for example, if you need a platform-specific "
"library to handle some aspect of your app, you can specify that library in "
"the platform-specific `requires` section, and that setting will only be used "
"for that platform. You will notice that the `toga` libraries are all "
"specified in the platform-specific `requires` section - this is because the "
"libraries needed to display a user interface are platform specific."
msgstr ""
"Più avanti in `pyproject.toml`, si noteranno altre sezioni che dipendono dal "
"sistema operativo, come `[tool.briefcase.app.helloworld.macOS]` e `"
"[tool.briefcase.app.helloworld.windows]`. Queste sezioni hanno anche "
"un'impostazione `requires`. Queste impostazioni consentono di definire "
"dipendenze aggiuntive specifiche per la piattaforma; quindi, ad esempio, se "
"si ha bisogno di una libreria specifica per la piattaforma per gestire "
"alcuni aspetti dell'applicazione, si può specificare tale libreria nella "
"sezione `requires` specifica per la piattaforma, e tale impostazione sarà "
"utilizzata solo per quella piattaforma. Si noterà che le librerie `toga` "
"sono tutte specificate nella sezione `requires` specifica della piattaforma, "
"perché le librerie necessarie per visualizzare l'interfaccia utente sono "
"specifiche della piattaforma."

#: docs/en/tutorial/tutorial-7.md:534
#, fuzzy
msgid ""
"In our case, we want `faker` to be installed on all platforms, so we use the "
"app-level `requires` setting. The app-level dependencies will always be "
"installed; the platform-specific dependencies are installed *in addition* to "
"the app-level ones."
msgstr ""
"Nel nostro caso, vogliamo che `httpx` sia installato su tutte le "
"piattaforme, quindi usiamo l'impostazione `requires` a livello di "
"applicazione. Le dipendenze a livello di applicazione saranno sempre "
"installate; le dipendenze specifiche della piattaforma sono installate *in "
"aggiunta* a quelle a livello di applicazione."

#: docs/en/tutorial/tutorial-7.md:539
#, fuzzy
msgid ""
"Now that we've told Briefcase about our additional requirements, we can try "
"packaging our app again. Ensure that you've saved your changes to "
"`pyproject.toml`, and then update your app again - this time, passing in the "
"`-r` flag. This tells Briefcase to update requirements in the packaged app:"
msgstr ""
"Ora che abbiamo comunicato a Briefcase i nostri requisiti aggiuntivi, "
"possiamo riprovare a pacchettizzare la nostra applicazione. Assicurarsi di "
"aver salvato le modifiche a `pyproject.toml` e poi aggiornare di nuovo "
"l'applicazione, questa volta inserendo il flag `-r`. Questo indica a "
"Briefcase di aggiornare i requisiti nell'applicazione pacchettizzata:"

#: docs/en/tutorial/tutorial-7.md:663
#, fuzzy
msgid ""
"Once you've updated, you can run `briefcase build` and `briefcase run` - and "
"you should see your packaged app, with the new dialog behavior."
msgstr ""
"Una volta effettuato l'aggiornamento, si può eseguire `briefcase build` e `"
"briefcase run` e si dovrebbe vedere l'applicazione confezionata, con il "
"nuovo comportamento della finestra di dialogo."

#: docs/en/tutorial/tutorial-7.md:666
msgid "/// note | Note"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:668
#, fuzzy
msgid ""
"The `-r` option for updating requirements is also honored by the `build` and "
"`run` command, so if you want to update, build, and run in one step, you "
"could use `briefcase run -u -r`."
msgstr ""
"L'opzione `-r` per l'aggiornamento dei requisiti viene rispettata anche dai "
"comandi `build` e `run`, quindi se si vuole aggiornare, compilare ed "
"eseguire in un unico passaggio, si può usare `briefcase run -u -r`."

#: docs/en/tutorial/tutorial-7.md:674
msgid "Third-Party Python Packages for Mobile and Web"
msgstr ""

#: docs/en/tutorial/tutorial-7.md:676
msgid ""
"Faker is just one example of a third-party Python package - a collection of "
"code that isn't part what Python provides out of the box. These third-party "
"packages are most commonly distributed using the "
"[Python Package Index (PyPI)]{1}, and installed into your local virtual "
"environment. We've been using `pip` in this tutorial, but there are other "
"options."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:683
#, fuzzy
msgid ""
"On desktop platforms (macOS, Windows, Linux), essentially any package on "
"PyPI package can be installed into your virtual environment, or added to "
"your app's requirements. However, when building an app for mobile or web "
"platforms, [your options are slightly limited]{1}."
msgstr ""
"Sulle piattaforme desktop (macOS, Windows, Linux), qualsiasi `pip` "
"installabile può essere aggiunto ai requisiti. Sulle piattaforme mobili e "
"web, [le opzioni sono leggermente limitate]{1}."

#: docs/en/tutorial/tutorial-7.md:689
msgid ""
"In short; any *pure Python* package (i.e. any package created from a project "
"written *only* in Python) can be used without difficulty. Some packages, "
"though, are created from projects that contain both Python and other "
"languages (e.g. C, C++, Rust, etc). Code written in those languages needs to "
"be compiled to platform-specific binary modules before it can be used, and "
"those pre-compiled binary modules are only available on specific platforms. "
"Mobile and web platforms have very different requirements than \"standard\" "
"desktop platforms. At this time, most Python packages don't provide pre-"
"compiled binaries for mobile and web platforms."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:700
msgid ""
"On PyPI, packages are often provided in a pre-built distribution format "
"called *wheels*. To check whether a package is pure Python, look at the PyPI "
"downloads page for the project. If the wheels provided have a `-py3-none-"
"any.whl` suffix (e.g., [Faker]{1}), then they are pure Python wheels. "
"However, if the wheels have version and platform-specific extensions (e.g., "
"[Pillow]{2}, which has wheels with suffixes like "
"`-cp313-cp313-macosx_11_0_arm64.whl` and `-cp39-cp39-win_amd64.whl`), then "
"the wheel *contains a binary component*. That package cannot be installed on "
"mobile or web platforms unless a wheel compatible with those platforms has "
"been provided."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:713
msgid ""
"At this time, *most* binary packages on PyPI don't provide mobile- or web-"
"compatible wheels. To fill this gap, BeeWare provides binaries for some "
"popular binary modules (including `numpy`, `pandas`, and `cryptography`). "
"These wheels are *not* distributed on PyPI, but Briefcase will install those "
"wheels if they're available."
msgstr ""

#: docs/en/tutorial/tutorial-7.md:719
#, fuzzy
msgid ""
"It's *usually* possible to compile binary packages for mobile platforms, but "
"it's not easy to set up -- well outside the scope of an introductory "
"tutorial like this one."
msgstr ""
"BeeWare può fornire binari per alcuni moduli binari popolari (tra cui `numpy`"
", `pandas` e `cryptography`). È *di solito* possibile compilare pacchetti "
"per le piattaforme mobili, ma non è facile da configurare, il che esula "
"dallo scopo di un tutorial introduttivo come questo."

#: docs/en/tutorial/tutorial-7.md:723
msgid "Next steps"
msgstr "Prossimi passi"

#: docs/en/tutorial/tutorial-7.md:725
msgid ""
"We've now got an app that uses a third-party library! In [Tutorial 8]"
"[tutorial-8] we'll learn how to ensure our app remains responsive as we add "
"more complex application logic."
msgstr ""

#~ msgid "Tutorial 7 - Get this (third-)party started"
#~ msgstr "Esercitazione 7 - Iniziare questa (terza-)festa"
