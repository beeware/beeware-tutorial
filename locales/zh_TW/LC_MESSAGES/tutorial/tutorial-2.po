msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-15 23:26-0400\n"
"PO-Revision-Date: 2025-04-20 22:01+0000\n"
"Last-Translator: John <johnzhou721@gmail.com>\n"
"Language-Team: Chinese (Traditional Han script) <https://hosted.weblate.org/"
"projects/beeware/tutorial/tutorial-2/zh_Hant/>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/en/tutorial/tutorial-2.md:1
msgid "Tutorial 2 - Making it interesting { id=\"tutorial-2\" }"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:3
#, fuzzy
msgid ""
"In [Tutorial 1][tutorial-1], we generated a stub project that was able to "
"run, but we didn't write any code ourselves. Let's take a look at what was "
"generated for us."
msgstr "在 [教程 1 "
"中<tutorial-1>`，我們產生了一個能夠運行的存根項目，但我們自己沒有寫任何程式碼"
"。讓我們看看為我們產生了什麼。"

#: docs/en/tutorial/tutorial-2.md:7
#, fuzzy
msgid "What was generated"
msgstr "生成了什麼"

#: docs/en/tutorial/tutorial-2.md:9
#, fuzzy
msgid ""
"In the `src/helloworld` directory, you should see 3 files: `__init__.py`, "
"`__main__.py` and `app.py`."
msgstr "在 src/helloworld 目錄中，您應該會看到 3 個檔案：__init__.py、__main__.py 和 "
"app.py。"

#: docs/en/tutorial/tutorial-2.md:12
#, fuzzy
msgid ""
"`__init__.py` marks the `helloworld` directory as an importable Python "
"module. It is an empty file; the very fact it exists tells the Python "
"interpreter that the `helloworld` directory defines a module."
msgstr ""
"`__init__.py` 將`helloworld` 目錄標記為可匯入的Python 模組。這是一個空文件；"
"它的存在告訴 Python 解釋器`helloworld`目錄定義了一個模組。"

#: docs/en/tutorial/tutorial-2.md:16
msgid ""
"`__main__.py` marks the `helloworld` module as a special kind of module -an "
"executable module. If you try to run the `helloworld` module using `python -"
"m helloworld`, the `__main__.py` file is where Python will start executing. "
"The contents of `__main__.py` is relatively simple:"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:28
msgid "This file does two things:"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:30
msgid "It imports the `main` method from the `helloworld` app."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:31
#, fuzzy
msgid ""
"Then, it starts the application’s main loop. The main loop is the way a GUI "
"application listens for user input (like mouse clicks and keyboard presses)."
msgstr ""
"也就是說 - 它從`helloworld`應用程式導入`main`方法；如果它是作為入口點執行，"
"則呼叫 main() 方法，並啟動應用程式的主循環。主循環是 GUI "
"應用程式偵聽使用者輸入（如滑鼠點擊和鍵盤按下）的方式。"

#: docs/en/tutorial/tutorial-2.md:35
#, fuzzy
msgid ""
"The more interesting file is `app.py` - this contains the logic that creates "
"our application window:"
msgstr "更有趣的檔案是`app.py`——它包含創建我們的應用程式視窗的邏輯:"

#: docs/en/tutorial/tutorial-2.md:54
#, fuzzy
msgid "Let's go through this line by line:"
msgstr "讓我們逐行瀏覽一下："

#: docs/en/tutorial/tutorial-2.md:61
#, fuzzy
msgid ""
"First, we import the `toga` widget toolkit, as well as some style-related "
"utility constants. Our code doesn't use these yet - but we'll make use of "
"them shortly."
msgstr "首先，我們匯入`toga`小工具工具包，以及一些與樣式相關的實用程式類別和常數。"
"我們的程式碼尚未使用它們 - 但我們很快就會使用它們。"

#: docs/en/tutorial/tutorial-2.md:65
#, fuzzy
msgid "Then, we define a class:"
msgstr "然後，我們定義一個類別：："

#: docs/en/tutorial/tutorial-2.md:71
#, fuzzy
msgid ""
"Each Toga application has a single `toga.App` instance, representing the "
"running entity that is the application. The app may end up managing multiple "
"windows; but for simple applications, there will be a single main window."
msgstr ""
"每個 Toga "
"應用程式都有一個`toga.App`實例，代表應用程式的運作實體。該應用程式最終可能會"
"管理多個視窗；但對於簡單的應用程序，將有一個主視窗。"

#: docs/en/tutorial/tutorial-2.md:76
#, fuzzy
msgid "Next, we define a `startup()` method:"
msgstr "接下來，我們定義一個`startup()`方法："

#: docs/en/tutorial/tutorial-2.md:83
#, fuzzy
msgid ""
"The first thing the startup method does is to define a main box. Toga's "
"layout scheme behaves similar to HTML. You build an application by "
"constructing a collection of boxes, each of which contains other boxes, or "
"actual widgets. You then apply styles to these boxes to define how they will "
"consume the available window space."
msgstr ""
"啟動方法所做的第一件事是定義一個主框。 Toga 的佈局方案的行為與 HTML "
"類似。您可以透過建立一組框來建立應用程序，每個框都包含其他框或實際的小部件。"
"然後，您可以將樣式套用到這些方塊來定義它們將如何使用可用的視窗空間。"

#: docs/en/tutorial/tutorial-2.md:89
#, fuzzy
msgid ""
"In this application, we define a single box, but we don't put anything into "
"it."
msgstr "在此應用程式中，我們定義了一個框，但沒有在其中放入任何內容。"

#: docs/en/tutorial/tutorial-2.md:92
#, fuzzy
msgid "Next, we define a window into which we can put this empty box:"
msgstr "接下來，我們定義一個窗口，可以將這個空框放入其中："

#: docs/en/tutorial/tutorial-2.md:98
#, fuzzy
msgid ""
"This creates an instance of a `toga.MainWindow`, which will have a title "
"matching the application's name. A Main Window is a special kind of window "
"in Toga - it's a window that is closely bound to the life cycle of the app. "
"When the Main Window is closed, the application exits. The Main Window is "
"also the window that has the application's menu (if you're on a platform "
"like Windows where menu bars are part of the window)."
msgstr ""
"這將建立一個`toga.MainWindow`實例，它將具有與應用程式名稱相符的標題。"
"主視窗是 Toga 中的一種特殊視窗 - "
"它是與應用程式的生命週期密切相關的視窗。當主視窗關閉時，應用程式退出。主視窗"
"也是具有應用程式選單的視窗（如果您使用的是 Windows "
"等平台，其中功能表列是視窗的一部分）"

#: docs/en/tutorial/tutorial-2.md:106
msgid "/// admonition | Where is my window?"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:108
msgid ""
"If you have made an error in your code, the main window of the app may not "
"display. If this happens, you can type **Ctrl+C** in the terminal where you "
"started the app. This will stop the app. You can then fix the error and "
"restart the app."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:113
#: docs/en/tutorial/tutorial-2.md:148
#: docs/en/tutorial/tutorial-2.md:211
#: docs/en/tutorial/tutorial-2.md:302
#: docs/en/tutorial/tutorial-2.md:313
#: docs/en/tutorial/tutorial-2.md:324
#: docs/en/tutorial/tutorial-2.md:340
#: docs/en/tutorial/tutorial-2.md:348
#: docs/en/tutorial/tutorial-2.md:356
msgid "///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:115
#, fuzzy
msgid ""
"We then add our empty box as the content of the main window, and instruct "
"the application to show our window:"
msgstr "然後，我們添加空框作為主視窗的內容，並指示應用程式顯示我們的視窗:"

#: docs/en/tutorial/tutorial-2.md:123
msgid ""
"Last of all, we define a `main()` function. This is what creates the "
"instance of our application:"
msgstr "最後，我們定義一個`main()`方法。這就是創建我們的應用程式實例的原因:"

#: docs/en/tutorial/tutorial-2.md:131
#, fuzzy
msgid ""
"This `main()` method is the one that is imported and invoked by `__main__.py`"
". It creates and returns an instance of our `HelloWorld` application."
msgstr "這個`main()`方法是由`__main__.py`導入和呼叫的方法。它創建並傳回我們的`HelloWo"
"rld`應用程式的實例。"

#: docs/en/tutorial/tutorial-2.md:135
#, fuzzy
msgid ""
"That's the simplest possible Toga application. Let's put some of our own "
"content into the application, and make the app do something interesting."
msgstr "這是最簡單的 Toga "
"應用程式。讓我們將一些我們自己的內容放入應用程式中，並使應用程式做一些有趣的"
"事情。"

#: docs/en/tutorial/tutorial-2.md:138
#, fuzzy
msgid "Adding some content of our own"
msgstr "添加一些我們自己的內容"

#: docs/en/tutorial/tutorial-2.md:140
msgid "Let's do something more interesting with our `HelloWorld` app."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:142
#: docs/en/tutorial/tutorial-2.md:201
msgid "/// note | Note"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:144
#, fuzzy
msgid ""
"When you make these changes, make sure you keep the imports at the top of "
"the file, and the `main()` at the bottom of the file. You only need to "
"update the `HelloWorld` class."
msgstr "不要刪除文件頂部的導入或底部的`main()`。您只需要更新`HelloWorld`類別。"

#: docs/en/tutorial/tutorial-2.md:150
#, fuzzy
msgid ""
"Modify your `HelloWorld` class inside `src/helloworld/app.py` so that it "
"looks like this:"
msgstr "修改`src/helloworld/app.py`中的`HelloWorld`類，使其看起來像這樣:"

#: docs/en/tutorial/tutorial-2.md:185
#, fuzzy
msgid "Let's look in detail at what has changed."
msgstr "讓我們詳細看看發生了什麼變化。"

#: docs/en/tutorial/tutorial-2.md:187
#, fuzzy
msgid "We're still creating a main box; however, we are now applying a style:"
msgstr "我們仍在創建一個主盒子；然而，我們現在正在應用一種風格:"

#: docs/en/tutorial/tutorial-2.md:193
#, fuzzy
msgid ""
"Toga's built-in layout system is called \"Pack\". It behaves a lot like CSS. "
"You define objects in a hierarchy - in HTML, the objects are `<div>`, "
"`<span>`, and other DOM elements; in Toga, they're widgets and boxes. You "
"can then assign styles to the individual elements. In this case, we're "
"indicating that this is a `COLUMN` box - that is, it is a box that will "
"consume all the available width, and will expand its height as content is "
"added, but it will try to be as short as possible."
msgstr ""
"Toga 的內建佈局系統稱為`Pack`。它的行為很像 CSS。您可以在層次結構中定義物件 -"
" 在 HTML 中，物件是`<div>`、`][span]` 和其他 DOM 元素；在 Toga "
"中，它們是小部件和盒子。然後，您可以為各個元素指定樣式。在這種情況下，我們表"
"明這是一個`COLUMN`框 - "
"也就是說，它是一個將消耗所有可用寬度的框，並且會在添加內容時擴展其高度，但它"
"會嘗試盡可能短。</span>"

#: docs/en/tutorial/tutorial-2.md:203
msgid ""
"For more advanced uses, Toga also supports a separate style object, which is "
"used like this:"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:213
msgid "Next, we define a couple of widgets:"
msgstr "接下來，我們定義幾個小工具:"

#: docs/en/tutorial/tutorial-2.md:223
#, fuzzy
msgid ""
"Here, we define a Label and a TextInput. Both widgets have styles associated "
"with them; the label will have 5px of margin on its left and right, and no "
"margin on the top and bottom. The TextInput is marked as being flexible - "
"that is, it will absorb all available space in its layout axis."
msgstr ""
"在這裡，我們定義了一個 Label 和一個 "
"TextInput。這兩個小部件都有與之相關的樣式；標籤的左側和右側將有 5 "
"個像素的內邊距，頂部和底部將沒有內邊距。 TextInput 被標記為靈活的 - "
"也就是說，它將吸收其佈局軸中的所有可用空間。"

#: docs/en/tutorial/tutorial-2.md:229
#, fuzzy
msgid ""
"The TextInput is assigned as an instance variable of the class. This gives "
"us easy access to the widget instance - something that we'll use in a moment."
msgstr "TextInput 被指定為該類別的實例變數。這使我們可以輕鬆存取小部件實例 - "
"我們稍後將使用它。"

#: docs/en/tutorial/tutorial-2.md:233
#, fuzzy
msgid "Next, we define a box to hold these two widgets:"
msgstr "接下來，我們定義一個盒子來容納這兩個小工具："

#: docs/en/tutorial/tutorial-2.md:241
#, fuzzy
msgid ""
"The `name_box` is a box just like the main box; however, this time, it's a "
"`ROW` box. That means content will be added horizontally, and it will try to "
"make its width as narrow as possible. The box also has some margin - 5px on "
"all sides."
msgstr ""
"`name_box` "
"是一個像主盒子一樣的盒子；然而，這一次，它是一個`ROW`盒子。這意味著內容將水平"
"添加，並且它將嘗試使其寬度盡可能窄。盒子還有一些內邊距 - 所有邊都是 5px。"

#: docs/en/tutorial/tutorial-2.md:246
#, fuzzy
msgid "Now we define a button:"
msgstr "現在我們定義一個按鈕:"

#: docs/en/tutorial/tutorial-2.md:256
msgid ""
"The button also has 5px of margin on all sides. We also define a *handler* -"
"a method to invoke when the button is pressed."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:259
#, fuzzy
msgid "Then, we add the name box and the button to the main box:"
msgstr "然後，我們將名稱框和按鈕新增到主框："

#: docs/en/tutorial/tutorial-2.md:266
#, fuzzy
msgid ""
"This completes our layout; the rest of the startup method is as it was "
"previously - defining a `MainWindow`, and assigning the main box as the "
"window's content:"
msgstr "這樣就完成了我們的佈局；啟動方法的其餘部分與之前一樣 - 定義一個 "
"MainWindow，並將主框指定為視窗的內容:"

#: docs/en/tutorial/tutorial-2.md:276
#, fuzzy
msgid ""
"The last thing we need to do is define the handler for the button. A handler "
"can be any method, generator, or asynchronous coroutine; it accepts the "
"widget that generated the event as an argument, and will be invoked whenever "
"the button is pressed:"
msgstr ""
"我們需要做的最後一件事是定義按鈕的處理程序。處理程序可以是任何方法、生成器或"
"非同步協程；它接受生成事件的小部件作為參數，並且每當按下按鈕時就會調用:"

#: docs/en/tutorial/tutorial-2.md:286
#, fuzzy
msgid ""
"The body of the method is a simple print statement - however, it will "
"interrogate the current value of the name input, and use that content as the "
"text that is printed."
msgstr "該方法的主體是一個簡單的列印語句 - "
"但是，它將詢問名稱輸入的當前值，並使用該內容作為列印的文字。"

#: docs/en/tutorial/tutorial-2.md:290
#, fuzzy
msgid ""
"Now that we've made these changes we can see what they look like by starting "
"the application again. As before, we'll use developer mode:"
msgstr "現在我們已經進行了這些更改，我們可以透過再次啟動應用程式來查看它們的外觀。和"
"以前一樣，我們將使用開發者模式："

#: docs/en/tutorial/tutorial-2.md:293
#: docs/en/tutorial/tutorial-2.md:334
msgid "/// tab | macOS"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:304
#: docs/en/tutorial/tutorial-2.md:342
msgid "/// tab | Linux"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:315
#: docs/en/tutorial/tutorial-2.md:350
msgid "/// tab | Windows"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:326
#, fuzzy
msgid ""
"You'll notice that this time, it *doesn't* install dependencies. Briefcase "
"can detect that the application has been run before, and to save time, will "
"only run the application. If you add new dependencies to your app, you need "
"to make sure that they're installed by passing in a `-r` option when you run "
"`briefcase dev`."
msgstr ""
"您會注意到，這一次，它`不`安裝依賴項。公文包可以檢測到該應用程式之前已經運行"
"過，為了節省時間，只會運行該應用程式。如果您為應用程式新增的依賴項，則可以在"
"執行`briefcase dev`時傳入`-r`選項來確保它們已安裝。"

#: docs/en/tutorial/tutorial-2.md:332
msgid "This should open a GUI window:"
msgstr "這應該打開一個 GUI 視窗："

#: docs/en/tutorial/tutorial-2.md:336
msgid "![Hello World Tutorial 2 window, on macOS]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:344
msgid "![Hello World Tutorial 2 window, on Linux]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:352
msgid "![Hello World Tutorial 2 window, on Windows]{1} /// caption ///"
msgstr ""

#: docs/en/tutorial/tutorial-2.md:358
#, fuzzy
msgid ""
"If you enter a name in the text box, and press the GUI button, you should "
"see output appear in the console where you started the application."
msgstr "如果您在文字方塊中輸入名稱，然後按 GUI "
"按鈕，您應該會看到啟動應用程式的控制台中出現輸出。"

#: docs/en/tutorial/tutorial-2.md:362
msgid ""
"Before continuing, close the app. As with Tutorial 1, you can do this by "
"pressing the close button on the application window, by selecting Quit/Exit "
"from the application's menu, or by typing **Ctrl+C** in the terminal where "
"you ran `briefcase dev`."
msgstr ""

#: docs/en/tutorial/tutorial-2.md:367
msgid "Next steps"
msgstr "下一步"

#: docs/en/tutorial/tutorial-2.md:369
#, fuzzy
msgid ""
"We've now got an application that does something a little more interesting. "
"But it only runs on our own computer. Let's package this application for "
"distribution. In [Tutorial 3][tutorial-3], we'll wrap our application up as "
"a standalone installer that we could send to a friend, a customer, or upload "
"to an App Store."
msgstr ""
"我們現在有了一個可以做一些更有趣的事情的應用程式。但它只能在我們自己的計算機"
"上運行。讓我們打包這個應用程式以進行分發。在 :doc:`教程 3 "
"中<tutorial-3>`，我們將把我們的應用程式打包為一個獨立的安裝程序，我們可以將其"
"發送給朋友、客戶，或上傳到應用程式商店。"

#, fuzzy
#~ msgid "Tutorial 2 - Making it interesting"
#~ msgstr "教學 2 - 讓它變得有趣"
